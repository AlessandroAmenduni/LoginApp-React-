{"ast":null,"code":"'use strict';\n\nconst Header = require('./header.js');\n\nconst path = require('path');\n\nclass Pax {\n  constructor(obj, global) {\n    this.atime = obj.atime || null;\n    this.charset = obj.charset || null;\n    this.comment = obj.comment || null;\n    this.ctime = obj.ctime || null;\n    this.gid = obj.gid || null;\n    this.gname = obj.gname || null;\n    this.linkpath = obj.linkpath || null;\n    this.mtime = obj.mtime || null;\n    this.path = obj.path || null;\n    this.size = obj.size || null;\n    this.uid = obj.uid || null;\n    this.uname = obj.uname || null;\n    this.dev = obj.dev || null;\n    this.ino = obj.ino || null;\n    this.nlink = obj.nlink || null;\n    this.global = global || false;\n  }\n\n  encode() {\n    const body = this.encodeBody();\n    if (body === '') return null;\n    const bodyLen = Buffer.byteLength(body); // round up to 512 bytes\n    // add 512 for header\n\n    const bufLen = 512 * Math.ceil(1 + bodyLen / 512);\n    const buf = Buffer.allocUnsafe(bufLen); // 0-fill the header section, it might not hit every field\n\n    for (let i = 0; i < 512; i++) buf[i] = 0;\n\n    new Header({\n      // XXX split the path\n      // then the path should be PaxHeader + basename, but less than 99,\n      // prepend with the dirname\n      path: ('PaxHeader/' + path.basename(this.path)).slice(0, 99),\n      mode: this.mode || 0o644,\n      uid: this.uid || null,\n      gid: this.gid || null,\n      size: bodyLen,\n      mtime: this.mtime || null,\n      type: this.global ? 'GlobalExtendedHeader' : 'ExtendedHeader',\n      linkpath: '',\n      uname: this.uname || '',\n      gname: this.gname || '',\n      devmaj: 0,\n      devmin: 0,\n      atime: this.atime || null,\n      ctime: this.ctime || null\n    }).encode(buf);\n    buf.write(body, 512, bodyLen, 'utf8'); // null pad after the body\n\n    for (let i = bodyLen + 512; i < buf.length; i++) buf[i] = 0;\n\n    return buf;\n  }\n\n  encodeBody() {\n    return this.encodeField('path') + this.encodeField('ctime') + this.encodeField('atime') + this.encodeField('dev') + this.encodeField('ino') + this.encodeField('nlink') + this.encodeField('charset') + this.encodeField('comment') + this.encodeField('gid') + this.encodeField('gname') + this.encodeField('linkpath') + this.encodeField('mtime') + this.encodeField('size') + this.encodeField('uid') + this.encodeField('uname');\n  }\n\n  encodeField(field) {\n    if (this[field] === null || this[field] === undefined) return '';\n    const v = this[field] instanceof Date ? this[field].getTime() / 1000 : this[field];\n    const s = ' ' + (field === 'dev' || field === 'ino' || field === 'nlink' ? 'SCHILY.' : '') + field + '=' + v + '\\n';\n    const byteLen = Buffer.byteLength(s); // the digits includes the length of the digits in ascii base-10\n    // so if it's 9 characters, then adding 1 for the 9 makes it 10\n    // which makes it 11 chars.\n\n    let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1;\n    if (byteLen + digits >= Math.pow(10, digits)) digits += 1;\n    const len = digits + byteLen;\n    return len + s;\n  }\n\n}\n\nPax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g);\n\nconst merge = (a, b) => b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a;\n\nconst parseKV = string => string.replace(/\\n$/, '').split('\\n').reduce(parseKVLine, Object.create(null));\n\nconst parseKVLine = (set, line) => {\n  const n = parseInt(line, 10); // XXX Values with \\n in them will fail this.\n  // Refactor to not be a naive line-by-line parse.\n\n  if (n !== Buffer.byteLength(line) + 1) return set;\n  line = line.substr((n + ' ').length);\n  const kv = line.split('=');\n  const k = kv.shift().replace(/^SCHILY\\.(dev|ino|nlink)/, '$1');\n  if (!k) return set;\n  const v = kv.join('=');\n  set[k] = /^([A-Z]+\\.)?([mac]|birth|creation)time$/.test(k) ? new Date(v * 1000) : /^[0-9]+$/.test(v) ? +v : v;\n  return set;\n};\n\nmodule.exports = Pax;","map":{"version":3,"sources":["C:/Users/user/Desktop/loginApp/node_modules/tar/lib/pax.js"],"names":["Header","require","path","Pax","constructor","obj","global","atime","charset","comment","ctime","gid","gname","linkpath","mtime","size","uid","uname","dev","ino","nlink","encode","body","encodeBody","bodyLen","Buffer","byteLength","bufLen","Math","ceil","buf","allocUnsafe","i","basename","slice","mode","type","devmaj","devmin","write","length","encodeField","field","undefined","v","Date","getTime","s","byteLen","digits","floor","log","pow","len","parse","string","ex","g","merge","parseKV","a","b","Object","keys","reduce","k","replace","split","parseKVLine","create","set","line","n","parseInt","substr","kv","shift","join","test","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\nconst Header = require('./header.js')\r\nconst path = require('path')\r\n\r\nclass Pax {\r\n  constructor (obj, global) {\r\n    this.atime = obj.atime || null\r\n    this.charset = obj.charset || null\r\n    this.comment = obj.comment || null\r\n    this.ctime = obj.ctime || null\r\n    this.gid = obj.gid || null\r\n    this.gname = obj.gname || null\r\n    this.linkpath = obj.linkpath || null\r\n    this.mtime = obj.mtime || null\r\n    this.path = obj.path || null\r\n    this.size = obj.size || null\r\n    this.uid = obj.uid || null\r\n    this.uname = obj.uname || null\r\n    this.dev = obj.dev || null\r\n    this.ino = obj.ino || null\r\n    this.nlink = obj.nlink || null\r\n    this.global = global || false\r\n  }\r\n\r\n  encode () {\r\n    const body = this.encodeBody()\r\n    if (body === '')\r\n      return null\r\n\r\n    const bodyLen = Buffer.byteLength(body)\r\n    // round up to 512 bytes\r\n    // add 512 for header\r\n    const bufLen = 512 * Math.ceil(1 + bodyLen / 512)\r\n    const buf = Buffer.allocUnsafe(bufLen)\r\n\r\n    // 0-fill the header section, it might not hit every field\r\n    for (let i = 0; i < 512; i++)\r\n      buf[i] = 0\r\n\r\n    new Header({\r\n      // XXX split the path\r\n      // then the path should be PaxHeader + basename, but less than 99,\r\n      // prepend with the dirname\r\n      path: ('PaxHeader/' + path.basename(this.path)).slice(0, 99),\r\n      mode: this.mode || 0o644,\r\n      uid: this.uid || null,\r\n      gid: this.gid || null,\r\n      size: bodyLen,\r\n      mtime: this.mtime || null,\r\n      type: this.global ? 'GlobalExtendedHeader' : 'ExtendedHeader',\r\n      linkpath: '',\r\n      uname: this.uname || '',\r\n      gname: this.gname || '',\r\n      devmaj: 0,\r\n      devmin: 0,\r\n      atime: this.atime || null,\r\n      ctime: this.ctime || null,\r\n    }).encode(buf)\r\n\r\n    buf.write(body, 512, bodyLen, 'utf8')\r\n\r\n    // null pad after the body\r\n    for (let i = bodyLen + 512; i < buf.length; i++)\r\n      buf[i] = 0\r\n\r\n    return buf\r\n  }\r\n\r\n  encodeBody () {\r\n    return (\r\n      this.encodeField('path') +\r\n      this.encodeField('ctime') +\r\n      this.encodeField('atime') +\r\n      this.encodeField('dev') +\r\n      this.encodeField('ino') +\r\n      this.encodeField('nlink') +\r\n      this.encodeField('charset') +\r\n      this.encodeField('comment') +\r\n      this.encodeField('gid') +\r\n      this.encodeField('gname') +\r\n      this.encodeField('linkpath') +\r\n      this.encodeField('mtime') +\r\n      this.encodeField('size') +\r\n      this.encodeField('uid') +\r\n      this.encodeField('uname')\r\n    )\r\n  }\r\n\r\n  encodeField (field) {\r\n    if (this[field] === null || this[field] === undefined)\r\n      return ''\r\n    const v = this[field] instanceof Date ? this[field].getTime() / 1000\r\n      : this[field]\r\n    const s = ' ' +\r\n      (field === 'dev' || field === 'ino' || field === 'nlink'\r\n        ? 'SCHILY.' : '') +\r\n      field + '=' + v + '\\n'\r\n    const byteLen = Buffer.byteLength(s)\r\n    // the digits includes the length of the digits in ascii base-10\r\n    // so if it's 9 characters, then adding 1 for the 9 makes it 10\r\n    // which makes it 11 chars.\r\n    let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1\r\n    if (byteLen + digits >= Math.pow(10, digits))\r\n      digits += 1\r\n    const len = digits + byteLen\r\n    return len + s\r\n  }\r\n}\r\n\r\nPax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g)\r\n\r\nconst merge = (a, b) =>\r\n  b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a\r\n\r\nconst parseKV = string =>\r\n  string\r\n    .replace(/\\n$/, '')\r\n    .split('\\n')\r\n    .reduce(parseKVLine, Object.create(null))\r\n\r\nconst parseKVLine = (set, line) => {\r\n  const n = parseInt(line, 10)\r\n\r\n  // XXX Values with \\n in them will fail this.\r\n  // Refactor to not be a naive line-by-line parse.\r\n  if (n !== Buffer.byteLength(line) + 1)\r\n    return set\r\n\r\n  line = line.substr((n + ' ').length)\r\n  const kv = line.split('=')\r\n  const k = kv.shift().replace(/^SCHILY\\.(dev|ino|nlink)/, '$1')\r\n  if (!k)\r\n    return set\r\n\r\n  const v = kv.join('=')\r\n  set[k] = /^([A-Z]+\\.)?([mac]|birth|creation)time$/.test(k)\r\n    ? new Date(v * 1000)\r\n    : /^[0-9]+$/.test(v) ? +v\r\n    : v\r\n  return set\r\n}\r\n\r\nmodule.exports = Pax\r\n"]},"metadata":{},"sourceType":"script"}