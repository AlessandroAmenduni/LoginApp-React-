{"ast":null,"code":"'use strict';\n\nconst MiniPass = require('minipass');\n\nconst SLURP = Symbol('slurp');\nmodule.exports = class ReadEntry extends MiniPass {\n  constructor(header, ex, gex) {\n    super(); // read entries always start life paused.  this is to avoid the\n    // situation where Minipass's auto-ending empty streams results\n    // in an entry ending before we're ready for it.\n\n    this.pause();\n    this.extended = ex;\n    this.globalExtended = gex;\n    this.header = header;\n    this.startBlockSize = 512 * Math.ceil(header.size / 512);\n    this.blockRemain = this.startBlockSize;\n    this.remain = header.size;\n    this.type = header.type;\n    this.meta = false;\n    this.ignore = false;\n\n    switch (this.type) {\n      case 'File':\n      case 'OldFile':\n      case 'Link':\n      case 'SymbolicLink':\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'Directory':\n      case 'FIFO':\n      case 'ContiguousFile':\n      case 'GNUDumpDir':\n        break;\n\n      case 'NextFileHasLongLinkpath':\n      case 'NextFileHasLongPath':\n      case 'OldGnuLongPath':\n      case 'GlobalExtendedHeader':\n      case 'ExtendedHeader':\n      case 'OldExtendedHeader':\n        this.meta = true;\n        break;\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\n      // it may be worth doing the same, but with a warning.\n\n      default:\n        this.ignore = true;\n    }\n\n    this.path = header.path;\n    this.mode = header.mode;\n    if (this.mode) this.mode = this.mode & 0o7777;\n    this.uid = header.uid;\n    this.gid = header.gid;\n    this.uname = header.uname;\n    this.gname = header.gname;\n    this.size = header.size;\n    this.mtime = header.mtime;\n    this.atime = header.atime;\n    this.ctime = header.ctime;\n    this.linkpath = header.linkpath;\n    this.uname = header.uname;\n    this.gname = header.gname;\n    if (ex) this[SLURP](ex);\n    if (gex) this[SLURP](gex, true);\n  }\n\n  write(data) {\n    const writeLen = data.length;\n    if (writeLen > this.blockRemain) throw new Error('writing more to entry than is appropriate');\n    const r = this.remain;\n    const br = this.blockRemain;\n    this.remain = Math.max(0, r - writeLen);\n    this.blockRemain = Math.max(0, br - writeLen);\n    if (this.ignore) return true;\n    if (r >= writeLen) return super.write(data); // r < writeLen\n\n    return super.write(data.slice(0, r));\n  }\n\n  [SLURP](ex, global) {\n    for (const k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined && !(global && k === 'path')) this[k] = ex[k];\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/loginApp/node_modules/tar/lib/read-entry.js"],"names":["MiniPass","require","SLURP","Symbol","module","exports","ReadEntry","constructor","header","ex","gex","pause","extended","globalExtended","startBlockSize","Math","ceil","size","blockRemain","remain","type","meta","ignore","path","mode","uid","gid","uname","gname","mtime","atime","ctime","linkpath","write","data","writeLen","length","Error","r","br","max","slice","global","k","undefined"],"mappings":"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","sourcesContent":["'use strict'\r\nconst MiniPass = require('minipass')\r\n\r\nconst SLURP = Symbol('slurp')\r\nmodule.exports = class ReadEntry extends MiniPass {\r\n  constructor (header, ex, gex) {\r\n    super()\r\n    // read entries always start life paused.  this is to avoid the\r\n    // situation where Minipass's auto-ending empty streams results\r\n    // in an entry ending before we're ready for it.\r\n    this.pause()\r\n    this.extended = ex\r\n    this.globalExtended = gex\r\n    this.header = header\r\n    this.startBlockSize = 512 * Math.ceil(header.size / 512)\r\n    this.blockRemain = this.startBlockSize\r\n    this.remain = header.size\r\n    this.type = header.type\r\n    this.meta = false\r\n    this.ignore = false\r\n    switch (this.type) {\r\n      case 'File':\r\n      case 'OldFile':\r\n      case 'Link':\r\n      case 'SymbolicLink':\r\n      case 'CharacterDevice':\r\n      case 'BlockDevice':\r\n      case 'Directory':\r\n      case 'FIFO':\r\n      case 'ContiguousFile':\r\n      case 'GNUDumpDir':\r\n        break\r\n\r\n      case 'NextFileHasLongLinkpath':\r\n      case 'NextFileHasLongPath':\r\n      case 'OldGnuLongPath':\r\n      case 'GlobalExtendedHeader':\r\n      case 'ExtendedHeader':\r\n      case 'OldExtendedHeader':\r\n        this.meta = true\r\n        break\r\n\r\n      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'\r\n      // it may be worth doing the same, but with a warning.\r\n      default:\r\n        this.ignore = true\r\n    }\r\n\r\n    this.path = header.path\r\n    this.mode = header.mode\r\n    if (this.mode)\r\n      this.mode = this.mode & 0o7777\r\n    this.uid = header.uid\r\n    this.gid = header.gid\r\n    this.uname = header.uname\r\n    this.gname = header.gname\r\n    this.size = header.size\r\n    this.mtime = header.mtime\r\n    this.atime = header.atime\r\n    this.ctime = header.ctime\r\n    this.linkpath = header.linkpath\r\n    this.uname = header.uname\r\n    this.gname = header.gname\r\n\r\n    if (ex)\r\n      this[SLURP](ex)\r\n    if (gex)\r\n      this[SLURP](gex, true)\r\n  }\r\n\r\n  write (data) {\r\n    const writeLen = data.length\r\n    if (writeLen > this.blockRemain)\r\n      throw new Error('writing more to entry than is appropriate')\r\n\r\n    const r = this.remain\r\n    const br = this.blockRemain\r\n    this.remain = Math.max(0, r - writeLen)\r\n    this.blockRemain = Math.max(0, br - writeLen)\r\n    if (this.ignore)\r\n      return true\r\n\r\n    if (r >= writeLen)\r\n      return super.write(data)\r\n\r\n    // r < writeLen\r\n    return super.write(data.slice(0, r))\r\n  }\r\n\r\n  [SLURP] (ex, global) {\r\n    for (const k in ex) {\r\n      // we slurp in everything except for the path attribute in\r\n      // a global extended header, because that's weird.\r\n      if (ex[k] !== null && ex[k] !== undefined &&\r\n          !(global && k === 'path'))\r\n        this[k] = ex[k]\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}