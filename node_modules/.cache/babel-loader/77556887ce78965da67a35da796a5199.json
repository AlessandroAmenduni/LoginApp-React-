{"ast":null,"code":"'use strict'; // the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.\n// but the path reservations are required to avoid race conditions where\n// parallelized unpack ops may mess with one another, due to dependencies\n// (like a Link depending on its target) or destructive operations (like\n// clobbering an fs object to create one of a different type.)\n\nconst assert = require('assert');\n\nconst Parser = require('./parse.js');\n\nconst fs = require('fs');\n\nconst fsm = require('fs-minipass');\n\nconst path = require('path');\n\nconst mkdir = require('./mkdir.js');\n\nconst wc = require('./winchars.js');\n\nconst pathReservations = require('./path-reservations.js');\n\nconst ONENTRY = Symbol('onEntry');\nconst CHECKFS = Symbol('checkFs');\nconst CHECKFS2 = Symbol('checkFs2');\nconst ISREUSABLE = Symbol('isReusable');\nconst MAKEFS = Symbol('makeFs');\nconst FILE = Symbol('file');\nconst DIRECTORY = Symbol('directory');\nconst LINK = Symbol('link');\nconst SYMLINK = Symbol('symlink');\nconst HARDLINK = Symbol('hardlink');\nconst UNSUPPORTED = Symbol('unsupported');\nconst CHECKPATH = Symbol('checkPath');\nconst MKDIR = Symbol('mkdir');\nconst ONERROR = Symbol('onError');\nconst PENDING = Symbol('pending');\nconst PEND = Symbol('pend');\nconst UNPEND = Symbol('unpend');\nconst ENDED = Symbol('ended');\nconst MAYBECLOSE = Symbol('maybeClose');\nconst SKIP = Symbol('skip');\nconst DOCHOWN = Symbol('doChown');\nconst UID = Symbol('uid');\nconst GID = Symbol('gid');\n\nconst crypto = require('crypto');\n\nconst getFlag = require('./get-write-flag.js');\n/* istanbul ignore next */\n\n\nconst neverCalled = () => {\n  throw new Error('sync function called cb somehow?!?');\n}; // Unlinks on Windows are not atomic.\n//\n// This means that if you have a file entry, followed by another\n// file entry with an identical name, and you cannot re-use the file\n// (because it's a hardlink, or because unlink:true is set, or it's\n// Windows, which does not have useful nlink values), then the unlink\n// will be committed to the disk AFTER the new file has been written\n// over the old one, deleting the new file.\n//\n// To work around this, on Windows systems, we rename the file and then\n// delete the renamed file.  It's a sloppy kludge, but frankly, I do not\n// know of a better way to do this, given windows' non-atomic unlink\n// semantics.\n//\n// See: https://github.com/npm/node-tar/issues/183\n\n/* istanbul ignore next */\n\n\nconst unlinkFile = (path, cb) => {\n  if (process.platform !== 'win32') return fs.unlink(path, cb);\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex');\n  fs.rename(path, name, er => {\n    if (er) return cb(er);\n    fs.unlink(name, cb);\n  });\n};\n/* istanbul ignore next */\n\n\nconst unlinkFileSync = path => {\n  if (process.platform !== 'win32') return fs.unlinkSync(path);\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex');\n  fs.renameSync(path, name);\n  fs.unlinkSync(name);\n}; // this.gid, entry.gid, this.processUid\n\n\nconst uint32 = (a, b, c) => a === a >>> 0 ? a : b === b >>> 0 ? b : c;\n\nclass Unpack extends Parser {\n  constructor(opt) {\n    if (!opt) opt = {};\n\n    opt.ondone = _ => {\n      this[ENDED] = true;\n      this[MAYBECLOSE]();\n    };\n\n    super(opt);\n    this.reservations = pathReservations();\n    this.transform = typeof opt.transform === 'function' ? opt.transform : null;\n    this.writable = true;\n    this.readable = false;\n    this[PENDING] = 0;\n    this[ENDED] = false;\n    this.dirCache = opt.dirCache || new Map();\n\n    if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {\n      // need both or neither\n      if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number') throw new TypeError('cannot set owner without number uid and gid');\n\n      if (opt.preserveOwner) {\n        throw new TypeError('cannot preserve owner in archive and also set owner explicitly');\n      }\n\n      this.uid = opt.uid;\n      this.gid = opt.gid;\n      this.setOwner = true;\n    } else {\n      this.uid = null;\n      this.gid = null;\n      this.setOwner = false;\n    } // default true for root\n\n\n    if (opt.preserveOwner === undefined && typeof opt.uid !== 'number') this.preserveOwner = process.getuid && process.getuid() === 0;else this.preserveOwner = !!opt.preserveOwner;\n    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ? process.getuid() : null;\n    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ? process.getgid() : null; // mostly just for testing, but useful in some cases.\n    // Forcibly trigger a chown on every entry, no matter what\n\n    this.forceChown = opt.forceChown === true; // turn ><?| in filenames into 0xf000-higher encoded forms\n\n    this.win32 = !!opt.win32 || process.platform === 'win32'; // do not unpack over files that are newer than what's in the archive\n\n    this.newer = !!opt.newer; // do not unpack over ANY files\n\n    this.keep = !!opt.keep; // do not set mtime/atime of extracted entries\n\n    this.noMtime = !!opt.noMtime; // allow .., absolute path entries, and unpacking through symlinks\n    // without this, warn and skip .., relativize absolutes, and error\n    // on symlinks in extraction path\n\n    this.preservePaths = !!opt.preservePaths; // unlink files and links before writing. This breaks existing hard\n    // links, and removes symlink directories rather than erroring\n\n    this.unlink = !!opt.unlink;\n    this.cwd = path.resolve(opt.cwd || process.cwd());\n    this.strip = +opt.strip || 0; // if we're not chmodding, then we don't need the process umask\n\n    this.processUmask = opt.noChmod ? 0 : process.umask();\n    this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask; // default mode for dirs created as parents\n\n    this.dmode = opt.dmode || 0o0777 & ~this.umask;\n    this.fmode = opt.fmode || 0o0666 & ~this.umask;\n    this.on('entry', entry => this[ONENTRY](entry));\n  } // a bad or damaged archive is a warning for Parser, but an error\n  // when extracting.  Mark those errors as unrecoverable, because\n  // the Unpack contract cannot be met.\n\n\n  warn(code, msg, data = {}) {\n    if (code === 'TAR_BAD_ARCHIVE' || code === 'TAR_ABORT') data.recoverable = false;\n    return super.warn(code, msg, data);\n  }\n\n  [MAYBECLOSE]() {\n    if (this[ENDED] && this[PENDING] === 0) {\n      this.emit('prefinish');\n      this.emit('finish');\n      this.emit('end');\n      this.emit('close');\n    }\n  }\n\n  [CHECKPATH](entry) {\n    if (this.strip) {\n      const parts = entry.path.split(/\\/|\\\\/);\n      if (parts.length < this.strip) return false;\n      entry.path = parts.slice(this.strip).join('/');\n\n      if (entry.type === 'Link') {\n        const linkparts = entry.linkpath.split(/\\/|\\\\/);\n        if (linkparts.length >= this.strip) entry.linkpath = linkparts.slice(this.strip).join('/');\n      }\n    }\n\n    if (!this.preservePaths) {\n      const p = entry.path;\n\n      if (p.match(/(^|\\/|\\\\)\\.\\.(\\\\|\\/|$)/)) {\n        this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {\n          entry,\n          path: p\n        });\n        return false;\n      } // absolutes on posix are also absolutes on win32\n      // so we only need to test this one to get both\n\n\n      if (path.win32.isAbsolute(p)) {\n        const parsed = path.win32.parse(p);\n        entry.path = p.substr(parsed.root.length);\n        const r = parsed.root;\n        this.warn('TAR_ENTRY_INFO', `stripping ${r} from absolute path`, {\n          entry,\n          path: p\n        });\n      }\n    } // only encode : chars that aren't drive letter indicators\n\n\n    if (this.win32) {\n      const parsed = path.win32.parse(entry.path);\n      entry.path = parsed.root === '' ? wc.encode(entry.path) : parsed.root + wc.encode(entry.path.substr(parsed.root.length));\n    }\n\n    if (path.isAbsolute(entry.path)) entry.absolute = entry.path;else entry.absolute = path.resolve(this.cwd, entry.path);\n    return true;\n  }\n\n  [ONENTRY](entry) {\n    if (!this[CHECKPATH](entry)) return entry.resume();\n    assert.equal(typeof entry.absolute, 'string');\n\n    switch (entry.type) {\n      case 'Directory':\n      case 'GNUDumpDir':\n        if (entry.mode) entry.mode = entry.mode | 0o700;\n\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n      case 'Link':\n      case 'SymbolicLink':\n        return this[CHECKFS](entry);\n\n      case 'CharacterDevice':\n      case 'BlockDevice':\n      case 'FIFO':\n      default:\n        return this[UNSUPPORTED](entry);\n    }\n  }\n\n  [ONERROR](er, entry) {\n    // Cwd has to exist, or else nothing works. That's serious.\n    // Other errors are warnings, which raise the error in strict\n    // mode, but otherwise continue on.\n    if (er.name === 'CwdError') this.emit('error', er);else {\n      this.warn('TAR_ENTRY_ERROR', er, {\n        entry\n      });\n      this[UNPEND]();\n      entry.resume();\n    }\n  }\n\n  [MKDIR](dir, mode, cb) {\n    mkdir(dir, {\n      uid: this.uid,\n      gid: this.gid,\n      processUid: this.processUid,\n      processGid: this.processGid,\n      umask: this.processUmask,\n      preserve: this.preservePaths,\n      unlink: this.unlink,\n      cache: this.dirCache,\n      cwd: this.cwd,\n      mode: mode,\n      noChmod: this.noChmod\n    }, cb);\n  }\n\n  [DOCHOWN](entry) {\n    // in preserve owner mode, chown if the entry doesn't match process\n    // in set owner mode, chown if setting doesn't match process\n    return this.forceChown || this.preserveOwner && (typeof entry.uid === 'number' && entry.uid !== this.processUid || typeof entry.gid === 'number' && entry.gid !== this.processGid) || typeof this.uid === 'number' && this.uid !== this.processUid || typeof this.gid === 'number' && this.gid !== this.processGid;\n  }\n\n  [UID](entry) {\n    return uint32(this.uid, entry.uid, this.processUid);\n  }\n\n  [GID](entry) {\n    return uint32(this.gid, entry.gid, this.processGid);\n  }\n\n  [FILE](entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.fmode;\n    const stream = new fsm.WriteStream(entry.absolute, {\n      flags: getFlag(entry.size),\n      mode: mode,\n      autoClose: false\n    });\n    stream.on('error', er => this[ONERROR](er, entry));\n    let actions = 1;\n\n    const done = er => {\n      if (er) return this[ONERROR](er, entry);\n\n      if (--actions === 0) {\n        fs.close(stream.fd, er => {\n          fullyDone();\n          er ? this[ONERROR](er, entry) : this[UNPEND]();\n        });\n      }\n    };\n\n    stream.on('finish', _ => {\n      // if futimes fails, try utimes\n      // if utimes fails, fail with the original error\n      // same for fchown/chown\n      const abs = entry.absolute;\n      const fd = stream.fd;\n\n      if (entry.mtime && !this.noMtime) {\n        actions++;\n        const atime = entry.atime || new Date();\n        const mtime = entry.mtime;\n        fs.futimes(fd, atime, mtime, er => er ? fs.utimes(abs, atime, mtime, er2 => done(er2 && er)) : done());\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++;\n        const uid = this[UID](entry);\n        const gid = this[GID](entry);\n        fs.fchown(fd, uid, gid, er => er ? fs.chown(abs, uid, gid, er2 => done(er2 && er)) : done());\n      }\n\n      done();\n    });\n    const tx = this.transform ? this.transform(entry) || entry : entry;\n\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry));\n      entry.pipe(tx);\n    }\n\n    tx.pipe(stream);\n  }\n\n  [DIRECTORY](entry, fullyDone) {\n    const mode = entry.mode & 0o7777 || this.dmode;\n    this[MKDIR](entry.absolute, mode, er => {\n      if (er) {\n        fullyDone();\n        return this[ONERROR](er, entry);\n      }\n\n      let actions = 1;\n\n      const done = _ => {\n        if (--actions === 0) {\n          fullyDone();\n          this[UNPEND]();\n          entry.resume();\n        }\n      };\n\n      if (entry.mtime && !this.noMtime) {\n        actions++;\n        fs.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done);\n      }\n\n      if (this[DOCHOWN](entry)) {\n        actions++;\n        fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done);\n      }\n\n      done();\n    });\n  }\n\n  [UNSUPPORTED](entry) {\n    entry.unsupported = true;\n    this.warn('TAR_ENTRY_UNSUPPORTED', `unsupported entry type: ${entry.type}`, {\n      entry\n    });\n    entry.resume();\n  }\n\n  [SYMLINK](entry, done) {\n    this[LINK](entry, entry.linkpath, 'symlink', done);\n  }\n\n  [HARDLINK](entry, done) {\n    this[LINK](entry, path.resolve(this.cwd, entry.linkpath), 'link', done);\n  }\n\n  [PEND]() {\n    this[PENDING]++;\n  }\n\n  [UNPEND]() {\n    this[PENDING]--;\n    this[MAYBECLOSE]();\n  }\n\n  [SKIP](entry) {\n    this[UNPEND]();\n    entry.resume();\n  } // Check if we can reuse an existing filesystem entry safely and\n  // overwrite it, rather than unlinking and recreating\n  // Windows doesn't report a useful nlink, so we just never reuse entries\n\n\n  [ISREUSABLE](entry, st) {\n    return entry.type === 'File' && !this.unlink && st.isFile() && st.nlink <= 1 && process.platform !== 'win32';\n  } // check if a thing is there, and if so, try to clobber it\n\n\n  [CHECKFS](entry) {\n    this[PEND]();\n    const paths = [entry.path];\n    if (entry.linkpath) paths.push(entry.linkpath);\n    this.reservations.reserve(paths, done => this[CHECKFS2](entry, done));\n  }\n\n  [CHECKFS2](entry, done) {\n    this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {\n      if (er) {\n        done();\n        return this[ONERROR](er, entry);\n      }\n\n      fs.lstat(entry.absolute, (er, st) => {\n        if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\n          this[SKIP](entry);\n          done();\n        } else if (er || this[ISREUSABLE](entry, st)) this[MAKEFS](null, entry, done);else if (st.isDirectory()) {\n          if (entry.type === 'Directory') {\n            if (!this.noChmod && (!entry.mode || (st.mode & 0o7777) === entry.mode)) this[MAKEFS](null, entry, done);else {\n              fs.chmod(entry.absolute, entry.mode, er => this[MAKEFS](er, entry, done));\n            }\n          } else fs.rmdir(entry.absolute, er => this[MAKEFS](er, entry, done));\n        } else unlinkFile(entry.absolute, er => this[MAKEFS](er, entry, done));\n      });\n    });\n  }\n\n  [MAKEFS](er, entry, done) {\n    if (er) return this[ONERROR](er, entry);\n\n    switch (entry.type) {\n      case 'File':\n      case 'OldFile':\n      case 'ContiguousFile':\n        return this[FILE](entry, done);\n\n      case 'Link':\n        return this[HARDLINK](entry, done);\n\n      case 'SymbolicLink':\n        return this[SYMLINK](entry, done);\n\n      case 'Directory':\n      case 'GNUDumpDir':\n        return this[DIRECTORY](entry, done);\n    }\n  }\n\n  [LINK](entry, linkpath, link, done) {\n    // XXX: get the type ('file' or 'dir') for windows\n    fs[link](linkpath, entry.absolute, er => {\n      if (er) return this[ONERROR](er, entry);\n      done();\n      this[UNPEND]();\n      entry.resume();\n    });\n  }\n\n}\n\nclass UnpackSync extends Unpack {\n  [CHECKFS](entry) {\n    const er = this[MKDIR](path.dirname(entry.absolute), this.dmode, neverCalled);\n    if (er) return this[ONERROR](er, entry);\n\n    try {\n      const st = fs.lstatSync(entry.absolute);\n      if (this.keep || this.newer && st.mtime > entry.mtime) return this[SKIP](entry);else if (this[ISREUSABLE](entry, st)) return this[MAKEFS](null, entry, neverCalled);else {\n        try {\n          if (st.isDirectory()) {\n            if (entry.type === 'Directory') {\n              if (!this.noChmod && entry.mode && (st.mode & 0o7777) !== entry.mode) fs.chmodSync(entry.absolute, entry.mode);\n            } else fs.rmdirSync(entry.absolute);\n          } else unlinkFileSync(entry.absolute);\n\n          return this[MAKEFS](null, entry, neverCalled);\n        } catch (er) {\n          return this[ONERROR](er, entry);\n        }\n      }\n    } catch (er) {\n      return this[MAKEFS](null, entry, neverCalled);\n    }\n  }\n\n  [FILE](entry, _) {\n    const mode = entry.mode & 0o7777 || this.fmode;\n\n    const oner = er => {\n      let closeError;\n\n      try {\n        fs.closeSync(fd);\n      } catch (e) {\n        closeError = e;\n      }\n\n      if (er || closeError) this[ONERROR](er || closeError, entry);\n    };\n\n    let fd;\n\n    try {\n      fd = fs.openSync(entry.absolute, getFlag(entry.size), mode);\n    } catch (er) {\n      return oner(er);\n    }\n\n    const tx = this.transform ? this.transform(entry) || entry : entry;\n\n    if (tx !== entry) {\n      tx.on('error', er => this[ONERROR](er, entry));\n      entry.pipe(tx);\n    }\n\n    tx.on('data', chunk => {\n      try {\n        fs.writeSync(fd, chunk, 0, chunk.length);\n      } catch (er) {\n        oner(er);\n      }\n    });\n    tx.on('end', _ => {\n      let er = null; // try both, falling futimes back to utimes\n      // if either fails, handle the first error\n\n      if (entry.mtime && !this.noMtime) {\n        const atime = entry.atime || new Date();\n        const mtime = entry.mtime;\n\n        try {\n          fs.futimesSync(fd, atime, mtime);\n        } catch (futimeser) {\n          try {\n            fs.utimesSync(entry.absolute, atime, mtime);\n          } catch (utimeser) {\n            er = futimeser;\n          }\n        }\n      }\n\n      if (this[DOCHOWN](entry)) {\n        const uid = this[UID](entry);\n        const gid = this[GID](entry);\n\n        try {\n          fs.fchownSync(fd, uid, gid);\n        } catch (fchowner) {\n          try {\n            fs.chownSync(entry.absolute, uid, gid);\n          } catch (chowner) {\n            er = er || fchowner;\n          }\n        }\n      }\n\n      oner(er);\n    });\n  }\n\n  [DIRECTORY](entry, _) {\n    const mode = entry.mode & 0o7777 || this.dmode;\n    const er = this[MKDIR](entry.absolute, mode);\n    if (er) return this[ONERROR](er, entry);\n\n    if (entry.mtime && !this.noMtime) {\n      try {\n        fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime);\n      } catch (er) {}\n    }\n\n    if (this[DOCHOWN](entry)) {\n      try {\n        fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry));\n      } catch (er) {}\n    }\n\n    entry.resume();\n  }\n\n  [MKDIR](dir, mode) {\n    try {\n      return mkdir.sync(dir, {\n        uid: this.uid,\n        gid: this.gid,\n        processUid: this.processUid,\n        processGid: this.processGid,\n        umask: this.processUmask,\n        preserve: this.preservePaths,\n        unlink: this.unlink,\n        cache: this.dirCache,\n        cwd: this.cwd,\n        mode: mode\n      });\n    } catch (er) {\n      return er;\n    }\n  }\n\n  [LINK](entry, linkpath, link, _) {\n    try {\n      fs[link + 'Sync'](linkpath, entry.absolute);\n      entry.resume();\n    } catch (er) {\n      return this[ONERROR](er, entry);\n    }\n  }\n\n}\n\nUnpack.Sync = UnpackSync;\nmodule.exports = Unpack;","map":{"version":3,"sources":["C:/Users/user/Desktop/loginApp/node_modules/tar/lib/unpack.js"],"names":["assert","require","Parser","fs","fsm","path","mkdir","wc","pathReservations","ONENTRY","Symbol","CHECKFS","CHECKFS2","ISREUSABLE","MAKEFS","FILE","DIRECTORY","LINK","SYMLINK","HARDLINK","UNSUPPORTED","CHECKPATH","MKDIR","ONERROR","PENDING","PEND","UNPEND","ENDED","MAYBECLOSE","SKIP","DOCHOWN","UID","GID","crypto","getFlag","neverCalled","Error","unlinkFile","cb","process","platform","unlink","name","randomBytes","toString","rename","er","unlinkFileSync","unlinkSync","renameSync","uint32","a","b","c","Unpack","constructor","opt","ondone","_","reservations","transform","writable","readable","dirCache","Map","uid","gid","TypeError","preserveOwner","setOwner","undefined","getuid","processUid","processGid","getgid","forceChown","win32","newer","keep","noMtime","preservePaths","cwd","resolve","strip","processUmask","noChmod","umask","dmode","fmode","on","entry","warn","code","msg","data","recoverable","emit","parts","split","length","slice","join","type","linkparts","linkpath","p","match","isAbsolute","parsed","parse","substr","root","r","encode","absolute","resume","equal","mode","dir","preserve","cache","fullyDone","stream","WriteStream","flags","size","autoClose","actions","done","close","fd","abs","mtime","atime","Date","futimes","utimes","er2","fchown","chown","tx","pipe","unsupported","st","isFile","nlink","paths","push","reserve","dirname","lstat","isDirectory","chmod","rmdir","link","UnpackSync","lstatSync","chmodSync","rmdirSync","oner","closeError","closeSync","e","openSync","chunk","writeSync","futimesSync","futimeser","utimesSync","utimeser","fchownSync","fchowner","chownSync","chowner","sync","Sync","module","exports"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMG,GAAG,GAAGH,OAAO,CAAC,aAAD,CAAnB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMM,EAAE,GAAGN,OAAO,CAAC,eAAD,CAAlB;;AACA,MAAMO,gBAAgB,GAAGP,OAAO,CAAC,wBAAD,CAAhC;;AAEA,MAAMQ,OAAO,GAAGC,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMC,OAAO,GAAGD,MAAM,CAAC,SAAD,CAAtB;AACA,MAAME,QAAQ,GAAGF,MAAM,CAAC,UAAD,CAAvB;AACA,MAAMG,UAAU,GAAGH,MAAM,CAAC,YAAD,CAAzB;AACA,MAAMI,MAAM,GAAGJ,MAAM,CAAC,QAAD,CAArB;AACA,MAAMK,IAAI,GAAGL,MAAM,CAAC,MAAD,CAAnB;AACA,MAAMM,SAAS,GAAGN,MAAM,CAAC,WAAD,CAAxB;AACA,MAAMO,IAAI,GAAGP,MAAM,CAAC,MAAD,CAAnB;AACA,MAAMQ,OAAO,GAAGR,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMS,QAAQ,GAAGT,MAAM,CAAC,UAAD,CAAvB;AACA,MAAMU,WAAW,GAAGV,MAAM,CAAC,aAAD,CAA1B;AACA,MAAMW,SAAS,GAAGX,MAAM,CAAC,WAAD,CAAxB;AACA,MAAMY,KAAK,GAAGZ,MAAM,CAAC,OAAD,CAApB;AACA,MAAMa,OAAO,GAAGb,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMc,OAAO,GAAGd,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMe,IAAI,GAAGf,MAAM,CAAC,MAAD,CAAnB;AACA,MAAMgB,MAAM,GAAGhB,MAAM,CAAC,QAAD,CAArB;AACA,MAAMiB,KAAK,GAAGjB,MAAM,CAAC,OAAD,CAApB;AACA,MAAMkB,UAAU,GAAGlB,MAAM,CAAC,YAAD,CAAzB;AACA,MAAMmB,IAAI,GAAGnB,MAAM,CAAC,MAAD,CAAnB;AACA,MAAMoB,OAAO,GAAGpB,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMqB,GAAG,GAAGrB,MAAM,CAAC,KAAD,CAAlB;AACA,MAAMsB,GAAG,GAAGtB,MAAM,CAAC,KAAD,CAAlB;;AACA,MAAMuB,MAAM,GAAGhC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMiC,OAAO,GAAGjC,OAAO,CAAC,qBAAD,CAAvB;AAEA;;;AACA,MAAMkC,WAAW,GAAG,MAAM;AACxB,QAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACD,CAFD,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMC,UAAU,GAAG,CAAChC,IAAD,EAAOiC,EAAP,KAAc;AAC/B,MAAIC,OAAO,CAACC,QAAR,KAAqB,OAAzB,EACE,OAAOrC,EAAE,CAACsC,MAAH,CAAUpC,IAAV,EAAgBiC,EAAhB,CAAP;AAEF,QAAMI,IAAI,GAAGrC,IAAI,GAAG,UAAP,GAAoB4B,MAAM,CAACU,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAjC;AACAzC,EAAAA,EAAE,CAAC0C,MAAH,CAAUxC,IAAV,EAAgBqC,IAAhB,EAAsBI,EAAE,IAAI;AAC1B,QAAIA,EAAJ,EACE,OAAOR,EAAE,CAACQ,EAAD,CAAT;AACF3C,IAAAA,EAAE,CAACsC,MAAH,CAAUC,IAAV,EAAgBJ,EAAhB;AACD,GAJD;AAKD,CAVD;AAYA;;;AACA,MAAMS,cAAc,GAAG1C,IAAI,IAAI;AAC7B,MAAIkC,OAAO,CAACC,QAAR,KAAqB,OAAzB,EACE,OAAOrC,EAAE,CAAC6C,UAAH,CAAc3C,IAAd,CAAP;AAEF,QAAMqC,IAAI,GAAGrC,IAAI,GAAG,UAAP,GAAoB4B,MAAM,CAACU,WAAP,CAAmB,EAAnB,EAAuBC,QAAvB,CAAgC,KAAhC,CAAjC;AACAzC,EAAAA,EAAE,CAAC8C,UAAH,CAAc5C,IAAd,EAAoBqC,IAApB;AACAvC,EAAAA,EAAE,CAAC6C,UAAH,CAAcN,IAAd;AACD,CAPD,C,CASA;;;AACA,MAAMQ,MAAM,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KACbF,CAAC,KAAKA,CAAC,KAAK,CAAZ,GAAgBA,CAAhB,GACEC,CAAC,KAAKA,CAAC,KAAK,CAAZ,GAAgBA,CAAhB,GACAC,CAHJ;;AAKA,MAAMC,MAAN,SAAqBpD,MAArB,CAA4B;AAC1BqD,EAAAA,WAAW,CAAEC,GAAF,EAAO;AAChB,QAAI,CAACA,GAAL,EACEA,GAAG,GAAG,EAAN;;AAEFA,IAAAA,GAAG,CAACC,MAAJ,GAAaC,CAAC,IAAI;AAChB,WAAK/B,KAAL,IAAc,IAAd;AACA,WAAKC,UAAL;AACD,KAHD;;AAKA,UAAM4B,GAAN;AAEA,SAAKG,YAAL,GAAoBnD,gBAAgB,EAApC;AAEA,SAAKoD,SAAL,GAAiB,OAAOJ,GAAG,CAACI,SAAX,KAAyB,UAAzB,GAAsCJ,GAAG,CAACI,SAA1C,GAAsD,IAAvE;AAEA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AAEA,SAAKtC,OAAL,IAAgB,CAAhB;AACA,SAAKG,KAAL,IAAc,KAAd;AAEA,SAAKoC,QAAL,GAAgBP,GAAG,CAACO,QAAJ,IAAgB,IAAIC,GAAJ,EAAhC;;AAEA,QAAI,OAAOR,GAAG,CAACS,GAAX,KAAmB,QAAnB,IAA+B,OAAOT,GAAG,CAACU,GAAX,KAAmB,QAAtD,EAAgE;AAC9D;AACA,UAAI,OAAOV,GAAG,CAACS,GAAX,KAAmB,QAAnB,IAA+B,OAAOT,GAAG,CAACU,GAAX,KAAmB,QAAtD,EACE,MAAM,IAAIC,SAAJ,CAAc,6CAAd,CAAN;;AACF,UAAIX,GAAG,CAACY,aAAR,EAAuB;AACrB,cAAM,IAAID,SAAJ,CACJ,gEADI,CAAN;AAED;;AACD,WAAKF,GAAL,GAAWT,GAAG,CAACS,GAAf;AACA,WAAKC,GAAL,GAAWV,GAAG,CAACU,GAAf;AACA,WAAKG,QAAL,GAAgB,IAAhB;AACD,KAXD,MAWO;AACL,WAAKJ,GAAL,GAAW,IAAX;AACA,WAAKC,GAAL,GAAW,IAAX;AACA,WAAKG,QAAL,GAAgB,KAAhB;AACD,KAtCe,CAwChB;;;AACA,QAAIb,GAAG,CAACY,aAAJ,KAAsBE,SAAtB,IAAmC,OAAOd,GAAG,CAACS,GAAX,KAAmB,QAA1D,EACE,KAAKG,aAAL,GAAqB7B,OAAO,CAACgC,MAAR,IAAkBhC,OAAO,CAACgC,MAAR,OAAqB,CAA5D,CADF,KAGE,KAAKH,aAAL,GAAqB,CAAC,CAACZ,GAAG,CAACY,aAA3B;AAEF,SAAKI,UAAL,GAAkB,CAAC,KAAKJ,aAAL,IAAsB,KAAKC,QAA5B,KAAyC9B,OAAO,CAACgC,MAAjD,GAChBhC,OAAO,CAACgC,MAAR,EADgB,GACG,IADrB;AAEA,SAAKE,UAAL,GAAkB,CAAC,KAAKL,aAAL,IAAsB,KAAKC,QAA5B,KAAyC9B,OAAO,CAACmC,MAAjD,GAChBnC,OAAO,CAACmC,MAAR,EADgB,GACG,IADrB,CAhDgB,CAmDhB;AACA;;AACA,SAAKC,UAAL,GAAkBnB,GAAG,CAACmB,UAAJ,KAAmB,IAArC,CArDgB,CAuDhB;;AACA,SAAKC,KAAL,GAAa,CAAC,CAACpB,GAAG,CAACoB,KAAN,IAAerC,OAAO,CAACC,QAAR,KAAqB,OAAjD,CAxDgB,CA0DhB;;AACA,SAAKqC,KAAL,GAAa,CAAC,CAACrB,GAAG,CAACqB,KAAnB,CA3DgB,CA6DhB;;AACA,SAAKC,IAAL,GAAY,CAAC,CAACtB,GAAG,CAACsB,IAAlB,CA9DgB,CAgEhB;;AACA,SAAKC,OAAL,GAAe,CAAC,CAACvB,GAAG,CAACuB,OAArB,CAjEgB,CAmEhB;AACA;AACA;;AACA,SAAKC,aAAL,GAAqB,CAAC,CAACxB,GAAG,CAACwB,aAA3B,CAtEgB,CAwEhB;AACA;;AACA,SAAKvC,MAAL,GAAc,CAAC,CAACe,GAAG,CAACf,MAApB;AAEA,SAAKwC,GAAL,GAAW5E,IAAI,CAAC6E,OAAL,CAAa1B,GAAG,CAACyB,GAAJ,IAAW1C,OAAO,CAAC0C,GAAR,EAAxB,CAAX;AACA,SAAKE,KAAL,GAAa,CAAC3B,GAAG,CAAC2B,KAAL,IAAc,CAA3B,CA7EgB,CA8EhB;;AACA,SAAKC,YAAL,GAAoB5B,GAAG,CAAC6B,OAAJ,GAAc,CAAd,GAAkB9C,OAAO,CAAC+C,KAAR,EAAtC;AACA,SAAKA,KAAL,GAAa,OAAO9B,GAAG,CAAC8B,KAAX,KAAqB,QAArB,GAAgC9B,GAAG,CAAC8B,KAApC,GAA4C,KAAKF,YAA9D,CAhFgB,CAkFhB;;AACA,SAAKG,KAAL,GAAa/B,GAAG,CAAC+B,KAAJ,IAAc,SAAU,CAAC,KAAKD,KAA3C;AACA,SAAKE,KAAL,GAAahC,GAAG,CAACgC,KAAJ,IAAc,SAAU,CAAC,KAAKF,KAA3C;AAEA,SAAKG,EAAL,CAAQ,OAAR,EAAiBC,KAAK,IAAI,KAAKjF,OAAL,EAAciF,KAAd,CAA1B;AACD,GAxFyB,CA0F1B;AACA;AACA;;;AACAC,EAAAA,IAAI,CAAEC,IAAF,EAAQC,GAAR,EAAaC,IAAI,GAAG,EAApB,EAAwB;AAC1B,QAAIF,IAAI,KAAK,iBAAT,IAA8BA,IAAI,KAAK,WAA3C,EACEE,IAAI,CAACC,WAAL,GAAmB,KAAnB;AACF,WAAO,MAAMJ,IAAN,CAAWC,IAAX,EAAiBC,GAAjB,EAAsBC,IAAtB,CAAP;AACD;;AAEU,GAAVlE,UAAU,IAAK;AACd,QAAI,KAAKD,KAAL,KAAe,KAAKH,OAAL,MAAkB,CAArC,EAAwC;AACtC,WAAKwE,IAAL,CAAU,WAAV;AACA,WAAKA,IAAL,CAAU,QAAV;AACA,WAAKA,IAAL,CAAU,KAAV;AACA,WAAKA,IAAL,CAAU,OAAV;AACD;AACF;;AAES,GAAT3E,SAAS,EAAGqE,KAAH,EAAU;AAClB,QAAI,KAAKP,KAAT,EAAgB;AACd,YAAMc,KAAK,GAAGP,KAAK,CAACrF,IAAN,CAAW6F,KAAX,CAAiB,OAAjB,CAAd;AACA,UAAID,KAAK,CAACE,MAAN,GAAe,KAAKhB,KAAxB,EACE,OAAO,KAAP;AACFO,MAAAA,KAAK,CAACrF,IAAN,GAAa4F,KAAK,CAACG,KAAN,CAAY,KAAKjB,KAAjB,EAAwBkB,IAAxB,CAA6B,GAA7B,CAAb;;AAEA,UAAIX,KAAK,CAACY,IAAN,KAAe,MAAnB,EAA2B;AACzB,cAAMC,SAAS,GAAGb,KAAK,CAACc,QAAN,CAAeN,KAAf,CAAqB,OAArB,CAAlB;AACA,YAAIK,SAAS,CAACJ,MAAV,IAAoB,KAAKhB,KAA7B,EACEO,KAAK,CAACc,QAAN,GAAiBD,SAAS,CAACH,KAAV,CAAgB,KAAKjB,KAArB,EAA4BkB,IAA5B,CAAiC,GAAjC,CAAjB;AACH;AACF;;AAED,QAAI,CAAC,KAAKrB,aAAV,EAAyB;AACvB,YAAMyB,CAAC,GAAGf,KAAK,CAACrF,IAAhB;;AACA,UAAIoG,CAAC,CAACC,KAAF,CAAQ,wBAAR,CAAJ,EAAuC;AACrC,aAAKf,IAAL,CAAU,iBAAV,EAA8B,oBAA9B,EAAmD;AACjDD,UAAAA,KADiD;AAEjDrF,UAAAA,IAAI,EAAEoG;AAF2C,SAAnD;AAIA,eAAO,KAAP;AACD,OARsB,CAUvB;AACA;;;AACA,UAAIpG,IAAI,CAACuE,KAAL,CAAW+B,UAAX,CAAsBF,CAAtB,CAAJ,EAA8B;AAC5B,cAAMG,MAAM,GAAGvG,IAAI,CAACuE,KAAL,CAAWiC,KAAX,CAAiBJ,CAAjB,CAAf;AACAf,QAAAA,KAAK,CAACrF,IAAN,GAAaoG,CAAC,CAACK,MAAF,CAASF,MAAM,CAACG,IAAP,CAAYZ,MAArB,CAAb;AACA,cAAMa,CAAC,GAAGJ,MAAM,CAACG,IAAjB;AACA,aAAKpB,IAAL,CAAU,gBAAV,EAA6B,aAAYqB,CAAE,qBAA3C,EAAiE;AAC/DtB,UAAAA,KAD+D;AAE/DrF,UAAAA,IAAI,EAAEoG;AAFyD,SAAjE;AAID;AACF,KAnCiB,CAqClB;;;AACA,QAAI,KAAK7B,KAAT,EAAgB;AACd,YAAMgC,MAAM,GAAGvG,IAAI,CAACuE,KAAL,CAAWiC,KAAX,CAAiBnB,KAAK,CAACrF,IAAvB,CAAf;AACAqF,MAAAA,KAAK,CAACrF,IAAN,GAAauG,MAAM,CAACG,IAAP,KAAgB,EAAhB,GAAqBxG,EAAE,CAAC0G,MAAH,CAAUvB,KAAK,CAACrF,IAAhB,CAArB,GACTuG,MAAM,CAACG,IAAP,GAAcxG,EAAE,CAAC0G,MAAH,CAAUvB,KAAK,CAACrF,IAAN,CAAWyG,MAAX,CAAkBF,MAAM,CAACG,IAAP,CAAYZ,MAA9B,CAAV,CADlB;AAED;;AAED,QAAI9F,IAAI,CAACsG,UAAL,CAAgBjB,KAAK,CAACrF,IAAtB,CAAJ,EACEqF,KAAK,CAACwB,QAAN,GAAiBxB,KAAK,CAACrF,IAAvB,CADF,KAGEqF,KAAK,CAACwB,QAAN,GAAiB7G,IAAI,CAAC6E,OAAL,CAAa,KAAKD,GAAlB,EAAuBS,KAAK,CAACrF,IAA7B,CAAjB;AAEF,WAAO,IAAP;AACD;;AAEO,GAAPI,OAAO,EAAGiF,KAAH,EAAU;AAChB,QAAI,CAAC,KAAKrE,SAAL,EAAgBqE,KAAhB,CAAL,EACE,OAAOA,KAAK,CAACyB,MAAN,EAAP;AAEFnH,IAAAA,MAAM,CAACoH,KAAP,CAAa,OAAO1B,KAAK,CAACwB,QAA1B,EAAoC,QAApC;;AAEA,YAAQxB,KAAK,CAACY,IAAd;AACE,WAAK,WAAL;AACA,WAAK,YAAL;AACE,YAAIZ,KAAK,CAAC2B,IAAV,EACE3B,KAAK,CAAC2B,IAAN,GAAa3B,KAAK,CAAC2B,IAAN,GAAa,KAA1B;;AAEJ,WAAK,MAAL;AACA,WAAK,SAAL;AACA,WAAK,gBAAL;AACA,WAAK,MAAL;AACA,WAAK,cAAL;AACE,eAAO,KAAK1G,OAAL,EAAc+E,KAAd,CAAP;;AAEF,WAAK,iBAAL;AACA,WAAK,aAAL;AACA,WAAK,MAAL;AACA;AACE,eAAO,KAAKtE,WAAL,EAAkBsE,KAAlB,CAAP;AAjBJ;AAmBD;;AAEO,GAAPnE,OAAO,EAAGuB,EAAH,EAAO4C,KAAP,EAAc;AACpB;AACA;AACA;AACA,QAAI5C,EAAE,CAACJ,IAAH,KAAY,UAAhB,EACE,KAAKsD,IAAL,CAAU,OAAV,EAAmBlD,EAAnB,EADF,KAEK;AACH,WAAK6C,IAAL,CAAU,iBAAV,EAA6B7C,EAA7B,EAAiC;AAAC4C,QAAAA;AAAD,OAAjC;AACA,WAAKhE,MAAL;AACAgE,MAAAA,KAAK,CAACyB,MAAN;AACD;AACF;;AAEK,GAAL7F,KAAK,EAAGgG,GAAH,EAAQD,IAAR,EAAc/E,EAAd,EAAkB;AACtBhC,IAAAA,KAAK,CAACgH,GAAD,EAAM;AACTrD,MAAAA,GAAG,EAAE,KAAKA,GADD;AAETC,MAAAA,GAAG,EAAE,KAAKA,GAFD;AAGTM,MAAAA,UAAU,EAAE,KAAKA,UAHR;AAITC,MAAAA,UAAU,EAAE,KAAKA,UAJR;AAKTa,MAAAA,KAAK,EAAE,KAAKF,YALH;AAMTmC,MAAAA,QAAQ,EAAE,KAAKvC,aANN;AAOTvC,MAAAA,MAAM,EAAE,KAAKA,MAPJ;AAQT+E,MAAAA,KAAK,EAAE,KAAKzD,QARH;AASTkB,MAAAA,GAAG,EAAE,KAAKA,GATD;AAUToC,MAAAA,IAAI,EAAEA,IAVG;AAWThC,MAAAA,OAAO,EAAE,KAAKA;AAXL,KAAN,EAYF/C,EAZE,CAAL;AAaD;;AAEO,GAAPR,OAAO,EAAG4D,KAAH,EAAU;AAChB;AACA;AACA,WAAO,KAAKf,UAAL,IACL,KAAKP,aAAL,KACC,OAAOsB,KAAK,CAACzB,GAAb,KAAqB,QAArB,IAAiCyB,KAAK,CAACzB,GAAN,KAAc,KAAKO,UAApD,IACC,OAAOkB,KAAK,CAACxB,GAAb,KAAqB,QAArB,IAAiCwB,KAAK,CAACxB,GAAN,KAAc,KAAKO,UAFtD,CADK,IAKJ,OAAO,KAAKR,GAAZ,KAAoB,QAApB,IAAgC,KAAKA,GAAL,KAAa,KAAKO,UAAlD,IACC,OAAO,KAAKN,GAAZ,KAAoB,QAApB,IAAgC,KAAKA,GAAL,KAAa,KAAKO,UANtD;AAOD;;AAEG,GAAH1C,GAAG,EAAG2D,KAAH,EAAU;AACZ,WAAOxC,MAAM,CAAC,KAAKe,GAAN,EAAWyB,KAAK,CAACzB,GAAjB,EAAsB,KAAKO,UAA3B,CAAb;AACD;;AAEG,GAAHxC,GAAG,EAAG0D,KAAH,EAAU;AACZ,WAAOxC,MAAM,CAAC,KAAKgB,GAAN,EAAWwB,KAAK,CAACxB,GAAjB,EAAsB,KAAKO,UAA3B,CAAb;AACD;;AAEI,GAAJ1D,IAAI,EAAG2E,KAAH,EAAU+B,SAAV,EAAqB;AACxB,UAAMJ,IAAI,GAAG3B,KAAK,CAAC2B,IAAN,GAAa,MAAb,IAAuB,KAAK7B,KAAzC;AACA,UAAMkC,MAAM,GAAG,IAAItH,GAAG,CAACuH,WAAR,CAAoBjC,KAAK,CAACwB,QAA1B,EAAoC;AACjDU,MAAAA,KAAK,EAAE1F,OAAO,CAACwD,KAAK,CAACmC,IAAP,CADmC;AAEjDR,MAAAA,IAAI,EAAEA,IAF2C;AAGjDS,MAAAA,SAAS,EAAE;AAHsC,KAApC,CAAf;AAKAJ,IAAAA,MAAM,CAACjC,EAAP,CAAU,OAAV,EAAmB3C,EAAE,IAAI,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAzB;AAEA,QAAIqC,OAAO,GAAG,CAAd;;AACA,UAAMC,IAAI,GAAGlF,EAAE,IAAI;AACjB,UAAIA,EAAJ,EACE,OAAO,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAP;;AAEF,UAAI,EAAEqC,OAAF,KAAc,CAAlB,EAAqB;AACnB5H,QAAAA,EAAE,CAAC8H,KAAH,CAASP,MAAM,CAACQ,EAAhB,EAAoBpF,EAAE,IAAI;AACxB2E,UAAAA,SAAS;AACT3E,UAAAA,EAAE,GAAG,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAH,GAA8B,KAAKhE,MAAL,GAAhC;AACD,SAHD;AAID;AACF,KAVD;;AAYAgG,IAAAA,MAAM,CAACjC,EAAP,CAAU,QAAV,EAAoB/B,CAAC,IAAI;AACvB;AACA;AACA;AACA,YAAMyE,GAAG,GAAGzC,KAAK,CAACwB,QAAlB;AACA,YAAMgB,EAAE,GAAGR,MAAM,CAACQ,EAAlB;;AAEA,UAAIxC,KAAK,CAAC0C,KAAN,IAAe,CAAC,KAAKrD,OAAzB,EAAkC;AAChCgD,QAAAA,OAAO;AACP,cAAMM,KAAK,GAAG3C,KAAK,CAAC2C,KAAN,IAAe,IAAIC,IAAJ,EAA7B;AACA,cAAMF,KAAK,GAAG1C,KAAK,CAAC0C,KAApB;AACAjI,QAAAA,EAAE,CAACoI,OAAH,CAAWL,EAAX,EAAeG,KAAf,EAAsBD,KAAtB,EAA6BtF,EAAE,IAC7BA,EAAE,GAAG3C,EAAE,CAACqI,MAAH,CAAUL,GAAV,EAAeE,KAAf,EAAsBD,KAAtB,EAA6BK,GAAG,IAAIT,IAAI,CAACS,GAAG,IAAI3F,EAAR,CAAxC,CAAH,GACAkF,IAAI,EAFR;AAGD;;AAED,UAAI,KAAKlG,OAAL,EAAc4D,KAAd,CAAJ,EAA0B;AACxBqC,QAAAA,OAAO;AACP,cAAM9D,GAAG,GAAG,KAAKlC,GAAL,EAAU2D,KAAV,CAAZ;AACA,cAAMxB,GAAG,GAAG,KAAKlC,GAAL,EAAU0D,KAAV,CAAZ;AACAvF,QAAAA,EAAE,CAACuI,MAAH,CAAUR,EAAV,EAAcjE,GAAd,EAAmBC,GAAnB,EAAwBpB,EAAE,IACxBA,EAAE,GAAG3C,EAAE,CAACwI,KAAH,CAASR,GAAT,EAAclE,GAAd,EAAmBC,GAAnB,EAAwBuE,GAAG,IAAIT,IAAI,CAACS,GAAG,IAAI3F,EAAR,CAAnC,CAAH,GACAkF,IAAI,EAFR;AAGD;;AAEDA,MAAAA,IAAI;AACL,KA1BD;AA4BA,UAAMY,EAAE,GAAG,KAAKhF,SAAL,GAAiB,KAAKA,SAAL,CAAe8B,KAAf,KAAyBA,KAA1C,GAAkDA,KAA7D;;AACA,QAAIkD,EAAE,KAAKlD,KAAX,EAAkB;AAChBkD,MAAAA,EAAE,CAACnD,EAAH,CAAM,OAAN,EAAe3C,EAAE,IAAI,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAArB;AACAA,MAAAA,KAAK,CAACmD,IAAN,CAAWD,EAAX;AACD;;AACDA,IAAAA,EAAE,CAACC,IAAH,CAAQnB,MAAR;AACD;;AAES,GAAT1G,SAAS,EAAG0E,KAAH,EAAU+B,SAAV,EAAqB;AAC7B,UAAMJ,IAAI,GAAG3B,KAAK,CAAC2B,IAAN,GAAa,MAAb,IAAuB,KAAK9B,KAAzC;AACA,SAAKjE,KAAL,EAAYoE,KAAK,CAACwB,QAAlB,EAA4BG,IAA5B,EAAkCvE,EAAE,IAAI;AACtC,UAAIA,EAAJ,EAAQ;AACN2E,QAAAA,SAAS;AACT,eAAO,KAAKlG,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAP;AACD;;AAED,UAAIqC,OAAO,GAAG,CAAd;;AACA,YAAMC,IAAI,GAAGtE,CAAC,IAAI;AAChB,YAAI,EAAEqE,OAAF,KAAc,CAAlB,EAAqB;AACnBN,UAAAA,SAAS;AACT,eAAK/F,MAAL;AACAgE,UAAAA,KAAK,CAACyB,MAAN;AACD;AACF,OAND;;AAQA,UAAIzB,KAAK,CAAC0C,KAAN,IAAe,CAAC,KAAKrD,OAAzB,EAAkC;AAChCgD,QAAAA,OAAO;AACP5H,QAAAA,EAAE,CAACqI,MAAH,CAAU9C,KAAK,CAACwB,QAAhB,EAA0BxB,KAAK,CAAC2C,KAAN,IAAe,IAAIC,IAAJ,EAAzC,EAAqD5C,KAAK,CAAC0C,KAA3D,EAAkEJ,IAAlE;AACD;;AAED,UAAI,KAAKlG,OAAL,EAAc4D,KAAd,CAAJ,EAA0B;AACxBqC,QAAAA,OAAO;AACP5H,QAAAA,EAAE,CAACwI,KAAH,CAASjD,KAAK,CAACwB,QAAf,EAAyB,KAAKnF,GAAL,EAAU2D,KAAV,CAAzB,EAA2C,KAAK1D,GAAL,EAAU0D,KAAV,CAA3C,EAA6DsC,IAA7D;AACD;;AAEDA,MAAAA,IAAI;AACL,KA1BD;AA2BD;;AAEW,GAAX5G,WAAW,EAAGsE,KAAH,EAAU;AACpBA,IAAAA,KAAK,CAACoD,WAAN,GAAoB,IAApB;AACA,SAAKnD,IAAL,CAAU,uBAAV,EACG,2BAA0BD,KAAK,CAACY,IAAK,EADxC,EAC2C;AAACZ,MAAAA;AAAD,KAD3C;AAEAA,IAAAA,KAAK,CAACyB,MAAN;AACD;;AAEO,GAAPjG,OAAO,EAAGwE,KAAH,EAAUsC,IAAV,EAAgB;AACtB,SAAK/G,IAAL,EAAWyE,KAAX,EAAkBA,KAAK,CAACc,QAAxB,EAAkC,SAAlC,EAA6CwB,IAA7C;AACD;;AAEQ,GAAR7G,QAAQ,EAAGuE,KAAH,EAAUsC,IAAV,EAAgB;AACvB,SAAK/G,IAAL,EAAWyE,KAAX,EAAkBrF,IAAI,CAAC6E,OAAL,CAAa,KAAKD,GAAlB,EAAuBS,KAAK,CAACc,QAA7B,CAAlB,EAA0D,MAA1D,EAAkEwB,IAAlE;AACD;;AAEI,GAAJvG,IAAI,IAAK;AACR,SAAKD,OAAL;AACD;;AAEM,GAANE,MAAM,IAAK;AACV,SAAKF,OAAL;AACA,SAAKI,UAAL;AACD;;AAEI,GAAJC,IAAI,EAAG6D,KAAH,EAAU;AACb,SAAKhE,MAAL;AACAgE,IAAAA,KAAK,CAACyB,MAAN;AACD,GAhWyB,CAkW1B;AACA;AACA;;;AACW,GAAVtG,UAAU,EAAG6E,KAAH,EAAUqD,EAAV,EAAc;AACvB,WAAOrD,KAAK,CAACY,IAAN,KAAe,MAAf,IACL,CAAC,KAAK7D,MADD,IAELsG,EAAE,CAACC,MAAH,EAFK,IAGLD,EAAE,CAACE,KAAH,IAAY,CAHP,IAIL1G,OAAO,CAACC,QAAR,KAAqB,OAJvB;AAKD,GA3WyB,CA6W1B;;;AACQ,GAAP7B,OAAO,EAAG+E,KAAH,EAAU;AAChB,SAAKjE,IAAL;AACA,UAAMyH,KAAK,GAAG,CAACxD,KAAK,CAACrF,IAAP,CAAd;AACA,QAAIqF,KAAK,CAACc,QAAV,EACE0C,KAAK,CAACC,IAAN,CAAWzD,KAAK,CAACc,QAAjB;AACF,SAAK7C,YAAL,CAAkByF,OAAlB,CAA0BF,KAA1B,EAAiClB,IAAI,IAAI,KAAKpH,QAAL,EAAe8E,KAAf,EAAsBsC,IAAtB,CAAzC;AACD;;AAEQ,GAARpH,QAAQ,EAAG8E,KAAH,EAAUsC,IAAV,EAAgB;AACvB,SAAK1G,KAAL,EAAYjB,IAAI,CAACgJ,OAAL,CAAa3D,KAAK,CAACwB,QAAnB,CAAZ,EAA0C,KAAK3B,KAA/C,EAAsDzC,EAAE,IAAI;AAC1D,UAAIA,EAAJ,EAAQ;AACNkF,QAAAA,IAAI;AACJ,eAAO,KAAKzG,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAP;AACD;;AACDvF,MAAAA,EAAE,CAACmJ,KAAH,CAAS5D,KAAK,CAACwB,QAAf,EAAyB,CAACpE,EAAD,EAAKiG,EAAL,KAAY;AACnC,YAAIA,EAAE,KAAK,KAAKjE,IAAL,IAAa,KAAKD,KAAL,IAAckE,EAAE,CAACX,KAAH,GAAW1C,KAAK,CAAC0C,KAAjD,CAAN,EAA+D;AAC7D,eAAKvG,IAAL,EAAW6D,KAAX;AACAsC,UAAAA,IAAI;AACL,SAHD,MAGO,IAAIlF,EAAE,IAAI,KAAKjC,UAAL,EAAiB6E,KAAjB,EAAwBqD,EAAxB,CAAV,EACL,KAAKjI,MAAL,EAAa,IAAb,EAAmB4E,KAAnB,EAA0BsC,IAA1B,EADK,KAGF,IAAIe,EAAE,CAACQ,WAAH,EAAJ,EAAsB;AACzB,cAAI7D,KAAK,CAACY,IAAN,KAAe,WAAnB,EAAgC;AAC9B,gBAAI,CAAC,KAAKjB,OAAN,KAAkB,CAACK,KAAK,CAAC2B,IAAP,IAAe,CAAC0B,EAAE,CAAC1B,IAAH,GAAU,MAAX,MAAuB3B,KAAK,CAAC2B,IAA9D,CAAJ,EACE,KAAKvG,MAAL,EAAa,IAAb,EAAmB4E,KAAnB,EAA0BsC,IAA1B,EADF,KAEK;AACH7H,cAAAA,EAAE,CAACqJ,KAAH,CAAS9D,KAAK,CAACwB,QAAf,EAAyBxB,KAAK,CAAC2B,IAA/B,EACEvE,EAAE,IAAI,KAAKhC,MAAL,EAAagC,EAAb,EAAiB4C,KAAjB,EAAwBsC,IAAxB,CADR;AAED;AACF,WAPD,MAQE7H,EAAE,CAACsJ,KAAH,CAAS/D,KAAK,CAACwB,QAAf,EAAyBpE,EAAE,IAAI,KAAKhC,MAAL,EAAagC,EAAb,EAAiB4C,KAAjB,EAAwBsC,IAAxB,CAA/B;AACH,SAVI,MAWH3F,UAAU,CAACqD,KAAK,CAACwB,QAAP,EAAiBpE,EAAE,IAAI,KAAKhC,MAAL,EAAagC,EAAb,EAAiB4C,KAAjB,EAAwBsC,IAAxB,CAAvB,CAAV;AACH,OAnBD;AAoBD,KAzBD;AA0BD;;AAEM,GAANlH,MAAM,EAAGgC,EAAH,EAAO4C,KAAP,EAAcsC,IAAd,EAAoB;AACzB,QAAIlF,EAAJ,EACE,OAAO,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAP;;AAEF,YAAQA,KAAK,CAACY,IAAd;AACE,WAAK,MAAL;AACA,WAAK,SAAL;AACA,WAAK,gBAAL;AACE,eAAO,KAAKvF,IAAL,EAAW2E,KAAX,EAAkBsC,IAAlB,CAAP;;AAEF,WAAK,MAAL;AACE,eAAO,KAAK7G,QAAL,EAAeuE,KAAf,EAAsBsC,IAAtB,CAAP;;AAEF,WAAK,cAAL;AACE,eAAO,KAAK9G,OAAL,EAAcwE,KAAd,EAAqBsC,IAArB,CAAP;;AAEF,WAAK,WAAL;AACA,WAAK,YAAL;AACE,eAAO,KAAKhH,SAAL,EAAgB0E,KAAhB,EAAuBsC,IAAvB,CAAP;AAdJ;AAgBD;;AAEI,GAAJ/G,IAAI,EAAGyE,KAAH,EAAUc,QAAV,EAAoBkD,IAApB,EAA0B1B,IAA1B,EAAgC;AACnC;AACA7H,IAAAA,EAAE,CAACuJ,IAAD,CAAF,CAASlD,QAAT,EAAmBd,KAAK,CAACwB,QAAzB,EAAmCpE,EAAE,IAAI;AACvC,UAAIA,EAAJ,EACE,OAAO,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAP;AACFsC,MAAAA,IAAI;AACJ,WAAKtG,MAAL;AACAgE,MAAAA,KAAK,CAACyB,MAAN;AACD,KAND;AAOD;;AAlbyB;;AAqb5B,MAAMwC,UAAN,SAAyBrG,MAAzB,CAAgC;AACtB,GAAP3C,OAAO,EAAG+E,KAAH,EAAU;AAChB,UAAM5C,EAAE,GAAG,KAAKxB,KAAL,EAAYjB,IAAI,CAACgJ,OAAL,CAAa3D,KAAK,CAACwB,QAAnB,CAAZ,EAA0C,KAAK3B,KAA/C,EAAsDpD,WAAtD,CAAX;AACA,QAAIW,EAAJ,EACE,OAAO,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAP;;AACF,QAAI;AACF,YAAMqD,EAAE,GAAG5I,EAAE,CAACyJ,SAAH,CAAalE,KAAK,CAACwB,QAAnB,CAAX;AACA,UAAI,KAAKpC,IAAL,IAAa,KAAKD,KAAL,IAAckE,EAAE,CAACX,KAAH,GAAW1C,KAAK,CAAC0C,KAAhD,EACE,OAAO,KAAKvG,IAAL,EAAW6D,KAAX,CAAP,CADF,KAEK,IAAI,KAAK7E,UAAL,EAAiB6E,KAAjB,EAAwBqD,EAAxB,CAAJ,EACH,OAAO,KAAKjI,MAAL,EAAa,IAAb,EAAmB4E,KAAnB,EAA0BvD,WAA1B,CAAP,CADG,KAEA;AACH,YAAI;AACF,cAAI4G,EAAE,CAACQ,WAAH,EAAJ,EAAsB;AACpB,gBAAI7D,KAAK,CAACY,IAAN,KAAe,WAAnB,EAAgC;AAC9B,kBAAI,CAAC,KAAKjB,OAAN,IAAiBK,KAAK,CAAC2B,IAAvB,IAA+B,CAAC0B,EAAE,CAAC1B,IAAH,GAAU,MAAX,MAAuB3B,KAAK,CAAC2B,IAAhE,EACElH,EAAE,CAAC0J,SAAH,CAAanE,KAAK,CAACwB,QAAnB,EAA6BxB,KAAK,CAAC2B,IAAnC;AACH,aAHD,MAIElH,EAAE,CAAC2J,SAAH,CAAapE,KAAK,CAACwB,QAAnB;AACH,WAND,MAOEnE,cAAc,CAAC2C,KAAK,CAACwB,QAAP,CAAd;;AACF,iBAAO,KAAKpG,MAAL,EAAa,IAAb,EAAmB4E,KAAnB,EAA0BvD,WAA1B,CAAP;AACD,SAVD,CAUE,OAAOW,EAAP,EAAW;AACX,iBAAO,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAP;AACD;AACF;AACF,KArBD,CAqBE,OAAO5C,EAAP,EAAW;AACX,aAAO,KAAKhC,MAAL,EAAa,IAAb,EAAmB4E,KAAnB,EAA0BvD,WAA1B,CAAP;AACD;AACF;;AAEI,GAAJpB,IAAI,EAAG2E,KAAH,EAAUhC,CAAV,EAAa;AAChB,UAAM2D,IAAI,GAAG3B,KAAK,CAAC2B,IAAN,GAAa,MAAb,IAAuB,KAAK7B,KAAzC;;AAEA,UAAMuE,IAAI,GAAGjH,EAAE,IAAI;AACjB,UAAIkH,UAAJ;;AACA,UAAI;AACF7J,QAAAA,EAAE,CAAC8J,SAAH,CAAa/B,EAAb;AACD,OAFD,CAEE,OAAOgC,CAAP,EAAU;AACVF,QAAAA,UAAU,GAAGE,CAAb;AACD;;AACD,UAAIpH,EAAE,IAAIkH,UAAV,EACE,KAAKzI,OAAL,EAAcuB,EAAE,IAAIkH,UAApB,EAAgCtE,KAAhC;AACH,KATD;;AAWA,QAAIwC,EAAJ;;AACA,QAAI;AACFA,MAAAA,EAAE,GAAG/H,EAAE,CAACgK,QAAH,CAAYzE,KAAK,CAACwB,QAAlB,EAA4BhF,OAAO,CAACwD,KAAK,CAACmC,IAAP,CAAnC,EAAiDR,IAAjD,CAAL;AACD,KAFD,CAEE,OAAOvE,EAAP,EAAW;AACX,aAAOiH,IAAI,CAACjH,EAAD,CAAX;AACD;;AACD,UAAM8F,EAAE,GAAG,KAAKhF,SAAL,GAAiB,KAAKA,SAAL,CAAe8B,KAAf,KAAyBA,KAA1C,GAAkDA,KAA7D;;AACA,QAAIkD,EAAE,KAAKlD,KAAX,EAAkB;AAChBkD,MAAAA,EAAE,CAACnD,EAAH,CAAM,OAAN,EAAe3C,EAAE,IAAI,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAArB;AACAA,MAAAA,KAAK,CAACmD,IAAN,CAAWD,EAAX;AACD;;AAEDA,IAAAA,EAAE,CAACnD,EAAH,CAAM,MAAN,EAAc2E,KAAK,IAAI;AACrB,UAAI;AACFjK,QAAAA,EAAE,CAACkK,SAAH,CAAanC,EAAb,EAAiBkC,KAAjB,EAAwB,CAAxB,EAA2BA,KAAK,CAACjE,MAAjC;AACD,OAFD,CAEE,OAAOrD,EAAP,EAAW;AACXiH,QAAAA,IAAI,CAACjH,EAAD,CAAJ;AACD;AACF,KAND;AAQA8F,IAAAA,EAAE,CAACnD,EAAH,CAAM,KAAN,EAAa/B,CAAC,IAAI;AAChB,UAAIZ,EAAE,GAAG,IAAT,CADgB,CAEhB;AACA;;AACA,UAAI4C,KAAK,CAAC0C,KAAN,IAAe,CAAC,KAAKrD,OAAzB,EAAkC;AAChC,cAAMsD,KAAK,GAAG3C,KAAK,CAAC2C,KAAN,IAAe,IAAIC,IAAJ,EAA7B;AACA,cAAMF,KAAK,GAAG1C,KAAK,CAAC0C,KAApB;;AACA,YAAI;AACFjI,UAAAA,EAAE,CAACmK,WAAH,CAAepC,EAAf,EAAmBG,KAAnB,EAA0BD,KAA1B;AACD,SAFD,CAEE,OAAOmC,SAAP,EAAkB;AAClB,cAAI;AACFpK,YAAAA,EAAE,CAACqK,UAAH,CAAc9E,KAAK,CAACwB,QAApB,EAA8BmB,KAA9B,EAAqCD,KAArC;AACD,WAFD,CAEE,OAAOqC,QAAP,EAAiB;AACjB3H,YAAAA,EAAE,GAAGyH,SAAL;AACD;AACF;AACF;;AAED,UAAI,KAAKzI,OAAL,EAAc4D,KAAd,CAAJ,EAA0B;AACxB,cAAMzB,GAAG,GAAG,KAAKlC,GAAL,EAAU2D,KAAV,CAAZ;AACA,cAAMxB,GAAG,GAAG,KAAKlC,GAAL,EAAU0D,KAAV,CAAZ;;AAEA,YAAI;AACFvF,UAAAA,EAAE,CAACuK,UAAH,CAAcxC,EAAd,EAAkBjE,GAAlB,EAAuBC,GAAvB;AACD,SAFD,CAEE,OAAOyG,QAAP,EAAiB;AACjB,cAAI;AACFxK,YAAAA,EAAE,CAACyK,SAAH,CAAalF,KAAK,CAACwB,QAAnB,EAA6BjD,GAA7B,EAAkCC,GAAlC;AACD,WAFD,CAEE,OAAO2G,OAAP,EAAgB;AAChB/H,YAAAA,EAAE,GAAGA,EAAE,IAAI6H,QAAX;AACD;AACF;AACF;;AAEDZ,MAAAA,IAAI,CAACjH,EAAD,CAAJ;AACD,KAlCD;AAmCD;;AAES,GAAT9B,SAAS,EAAG0E,KAAH,EAAUhC,CAAV,EAAa;AACrB,UAAM2D,IAAI,GAAG3B,KAAK,CAAC2B,IAAN,GAAa,MAAb,IAAuB,KAAK9B,KAAzC;AACA,UAAMzC,EAAE,GAAG,KAAKxB,KAAL,EAAYoE,KAAK,CAACwB,QAAlB,EAA4BG,IAA5B,CAAX;AACA,QAAIvE,EAAJ,EACE,OAAO,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAP;;AACF,QAAIA,KAAK,CAAC0C,KAAN,IAAe,CAAC,KAAKrD,OAAzB,EAAkC;AAChC,UAAI;AACF5E,QAAAA,EAAE,CAACqK,UAAH,CAAc9E,KAAK,CAACwB,QAApB,EAA8BxB,KAAK,CAAC2C,KAAN,IAAe,IAAIC,IAAJ,EAA7C,EAAyD5C,KAAK,CAAC0C,KAA/D;AACD,OAFD,CAEE,OAAOtF,EAAP,EAAW,CAAE;AAChB;;AACD,QAAI,KAAKhB,OAAL,EAAc4D,KAAd,CAAJ,EAA0B;AACxB,UAAI;AACFvF,QAAAA,EAAE,CAACyK,SAAH,CAAalF,KAAK,CAACwB,QAAnB,EAA6B,KAAKnF,GAAL,EAAU2D,KAAV,CAA7B,EAA+C,KAAK1D,GAAL,EAAU0D,KAAV,CAA/C;AACD,OAFD,CAEE,OAAO5C,EAAP,EAAW,CAAE;AAChB;;AACD4C,IAAAA,KAAK,CAACyB,MAAN;AACD;;AAEK,GAAL7F,KAAK,EAAGgG,GAAH,EAAQD,IAAR,EAAc;AAClB,QAAI;AACF,aAAO/G,KAAK,CAACwK,IAAN,CAAWxD,GAAX,EAAgB;AACrBrD,QAAAA,GAAG,EAAE,KAAKA,GADW;AAErBC,QAAAA,GAAG,EAAE,KAAKA,GAFW;AAGrBM,QAAAA,UAAU,EAAE,KAAKA,UAHI;AAIrBC,QAAAA,UAAU,EAAE,KAAKA,UAJI;AAKrBa,QAAAA,KAAK,EAAE,KAAKF,YALS;AAMrBmC,QAAAA,QAAQ,EAAE,KAAKvC,aANM;AAOrBvC,QAAAA,MAAM,EAAE,KAAKA,MAPQ;AAQrB+E,QAAAA,KAAK,EAAE,KAAKzD,QARS;AASrBkB,QAAAA,GAAG,EAAE,KAAKA,GATW;AAUrBoC,QAAAA,IAAI,EAAEA;AAVe,OAAhB,CAAP;AAYD,KAbD,CAaE,OAAOvE,EAAP,EAAW;AACX,aAAOA,EAAP;AACD;AACF;;AAEI,GAAJ7B,IAAI,EAAGyE,KAAH,EAAUc,QAAV,EAAoBkD,IAApB,EAA0BhG,CAA1B,EAA6B;AAChC,QAAI;AACFvD,MAAAA,EAAE,CAACuJ,IAAI,GAAG,MAAR,CAAF,CAAkBlD,QAAlB,EAA4Bd,KAAK,CAACwB,QAAlC;AACAxB,MAAAA,KAAK,CAACyB,MAAN;AACD,KAHD,CAGE,OAAOrE,EAAP,EAAW;AACX,aAAO,KAAKvB,OAAL,EAAcuB,EAAd,EAAkB4C,KAAlB,CAAP;AACD;AACF;;AAlJ6B;;AAqJhCpC,MAAM,CAACyH,IAAP,GAAcpB,UAAd;AACAqB,MAAM,CAACC,OAAP,GAAiB3H,MAAjB","sourcesContent":["'use strict'\r\n\r\n// the PEND/UNPEND stuff tracks whether we're ready to emit end/close yet.\r\n// but the path reservations are required to avoid race conditions where\r\n// parallelized unpack ops may mess with one another, due to dependencies\r\n// (like a Link depending on its target) or destructive operations (like\r\n// clobbering an fs object to create one of a different type.)\r\n\r\nconst assert = require('assert')\r\nconst Parser = require('./parse.js')\r\nconst fs = require('fs')\r\nconst fsm = require('fs-minipass')\r\nconst path = require('path')\r\nconst mkdir = require('./mkdir.js')\r\nconst wc = require('./winchars.js')\r\nconst pathReservations = require('./path-reservations.js')\r\n\r\nconst ONENTRY = Symbol('onEntry')\r\nconst CHECKFS = Symbol('checkFs')\r\nconst CHECKFS2 = Symbol('checkFs2')\r\nconst ISREUSABLE = Symbol('isReusable')\r\nconst MAKEFS = Symbol('makeFs')\r\nconst FILE = Symbol('file')\r\nconst DIRECTORY = Symbol('directory')\r\nconst LINK = Symbol('link')\r\nconst SYMLINK = Symbol('symlink')\r\nconst HARDLINK = Symbol('hardlink')\r\nconst UNSUPPORTED = Symbol('unsupported')\r\nconst CHECKPATH = Symbol('checkPath')\r\nconst MKDIR = Symbol('mkdir')\r\nconst ONERROR = Symbol('onError')\r\nconst PENDING = Symbol('pending')\r\nconst PEND = Symbol('pend')\r\nconst UNPEND = Symbol('unpend')\r\nconst ENDED = Symbol('ended')\r\nconst MAYBECLOSE = Symbol('maybeClose')\r\nconst SKIP = Symbol('skip')\r\nconst DOCHOWN = Symbol('doChown')\r\nconst UID = Symbol('uid')\r\nconst GID = Symbol('gid')\r\nconst crypto = require('crypto')\r\nconst getFlag = require('./get-write-flag.js')\r\n\r\n/* istanbul ignore next */\r\nconst neverCalled = () => {\r\n  throw new Error('sync function called cb somehow?!?')\r\n}\r\n\r\n// Unlinks on Windows are not atomic.\r\n//\r\n// This means that if you have a file entry, followed by another\r\n// file entry with an identical name, and you cannot re-use the file\r\n// (because it's a hardlink, or because unlink:true is set, or it's\r\n// Windows, which does not have useful nlink values), then the unlink\r\n// will be committed to the disk AFTER the new file has been written\r\n// over the old one, deleting the new file.\r\n//\r\n// To work around this, on Windows systems, we rename the file and then\r\n// delete the renamed file.  It's a sloppy kludge, but frankly, I do not\r\n// know of a better way to do this, given windows' non-atomic unlink\r\n// semantics.\r\n//\r\n// See: https://github.com/npm/node-tar/issues/183\r\n/* istanbul ignore next */\r\nconst unlinkFile = (path, cb) => {\r\n  if (process.platform !== 'win32')\r\n    return fs.unlink(path, cb)\r\n\r\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\r\n  fs.rename(path, name, er => {\r\n    if (er)\r\n      return cb(er)\r\n    fs.unlink(name, cb)\r\n  })\r\n}\r\n\r\n/* istanbul ignore next */\r\nconst unlinkFileSync = path => {\r\n  if (process.platform !== 'win32')\r\n    return fs.unlinkSync(path)\r\n\r\n  const name = path + '.DELETE.' + crypto.randomBytes(16).toString('hex')\r\n  fs.renameSync(path, name)\r\n  fs.unlinkSync(name)\r\n}\r\n\r\n// this.gid, entry.gid, this.processUid\r\nconst uint32 = (a, b, c) =>\r\n  a === a >>> 0 ? a\r\n  : b === b >>> 0 ? b\r\n  : c\r\n\r\nclass Unpack extends Parser {\r\n  constructor (opt) {\r\n    if (!opt)\r\n      opt = {}\r\n\r\n    opt.ondone = _ => {\r\n      this[ENDED] = true\r\n      this[MAYBECLOSE]()\r\n    }\r\n\r\n    super(opt)\r\n\r\n    this.reservations = pathReservations()\r\n\r\n    this.transform = typeof opt.transform === 'function' ? opt.transform : null\r\n\r\n    this.writable = true\r\n    this.readable = false\r\n\r\n    this[PENDING] = 0\r\n    this[ENDED] = false\r\n\r\n    this.dirCache = opt.dirCache || new Map()\r\n\r\n    if (typeof opt.uid === 'number' || typeof opt.gid === 'number') {\r\n      // need both or neither\r\n      if (typeof opt.uid !== 'number' || typeof opt.gid !== 'number')\r\n        throw new TypeError('cannot set owner without number uid and gid')\r\n      if (opt.preserveOwner) {\r\n        throw new TypeError(\r\n          'cannot preserve owner in archive and also set owner explicitly')\r\n      }\r\n      this.uid = opt.uid\r\n      this.gid = opt.gid\r\n      this.setOwner = true\r\n    } else {\r\n      this.uid = null\r\n      this.gid = null\r\n      this.setOwner = false\r\n    }\r\n\r\n    // default true for root\r\n    if (opt.preserveOwner === undefined && typeof opt.uid !== 'number')\r\n      this.preserveOwner = process.getuid && process.getuid() === 0\r\n    else\r\n      this.preserveOwner = !!opt.preserveOwner\r\n\r\n    this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ?\r\n      process.getuid() : null\r\n    this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ?\r\n      process.getgid() : null\r\n\r\n    // mostly just for testing, but useful in some cases.\r\n    // Forcibly trigger a chown on every entry, no matter what\r\n    this.forceChown = opt.forceChown === true\r\n\r\n    // turn ><?| in filenames into 0xf000-higher encoded forms\r\n    this.win32 = !!opt.win32 || process.platform === 'win32'\r\n\r\n    // do not unpack over files that are newer than what's in the archive\r\n    this.newer = !!opt.newer\r\n\r\n    // do not unpack over ANY files\r\n    this.keep = !!opt.keep\r\n\r\n    // do not set mtime/atime of extracted entries\r\n    this.noMtime = !!opt.noMtime\r\n\r\n    // allow .., absolute path entries, and unpacking through symlinks\r\n    // without this, warn and skip .., relativize absolutes, and error\r\n    // on symlinks in extraction path\r\n    this.preservePaths = !!opt.preservePaths\r\n\r\n    // unlink files and links before writing. This breaks existing hard\r\n    // links, and removes symlink directories rather than erroring\r\n    this.unlink = !!opt.unlink\r\n\r\n    this.cwd = path.resolve(opt.cwd || process.cwd())\r\n    this.strip = +opt.strip || 0\r\n    // if we're not chmodding, then we don't need the process umask\r\n    this.processUmask = opt.noChmod ? 0 : process.umask()\r\n    this.umask = typeof opt.umask === 'number' ? opt.umask : this.processUmask\r\n\r\n    // default mode for dirs created as parents\r\n    this.dmode = opt.dmode || (0o0777 & (~this.umask))\r\n    this.fmode = opt.fmode || (0o0666 & (~this.umask))\r\n\r\n    this.on('entry', entry => this[ONENTRY](entry))\r\n  }\r\n\r\n  // a bad or damaged archive is a warning for Parser, but an error\r\n  // when extracting.  Mark those errors as unrecoverable, because\r\n  // the Unpack contract cannot be met.\r\n  warn (code, msg, data = {}) {\r\n    if (code === 'TAR_BAD_ARCHIVE' || code === 'TAR_ABORT')\r\n      data.recoverable = false\r\n    return super.warn(code, msg, data)\r\n  }\r\n\r\n  [MAYBECLOSE] () {\r\n    if (this[ENDED] && this[PENDING] === 0) {\r\n      this.emit('prefinish')\r\n      this.emit('finish')\r\n      this.emit('end')\r\n      this.emit('close')\r\n    }\r\n  }\r\n\r\n  [CHECKPATH] (entry) {\r\n    if (this.strip) {\r\n      const parts = entry.path.split(/\\/|\\\\/)\r\n      if (parts.length < this.strip)\r\n        return false\r\n      entry.path = parts.slice(this.strip).join('/')\r\n\r\n      if (entry.type === 'Link') {\r\n        const linkparts = entry.linkpath.split(/\\/|\\\\/)\r\n        if (linkparts.length >= this.strip)\r\n          entry.linkpath = linkparts.slice(this.strip).join('/')\r\n      }\r\n    }\r\n\r\n    if (!this.preservePaths) {\r\n      const p = entry.path\r\n      if (p.match(/(^|\\/|\\\\)\\.\\.(\\\\|\\/|$)/)) {\r\n        this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {\r\n          entry,\r\n          path: p,\r\n        })\r\n        return false\r\n      }\r\n\r\n      // absolutes on posix are also absolutes on win32\r\n      // so we only need to test this one to get both\r\n      if (path.win32.isAbsolute(p)) {\r\n        const parsed = path.win32.parse(p)\r\n        entry.path = p.substr(parsed.root.length)\r\n        const r = parsed.root\r\n        this.warn('TAR_ENTRY_INFO', `stripping ${r} from absolute path`, {\r\n          entry,\r\n          path: p,\r\n        })\r\n      }\r\n    }\r\n\r\n    // only encode : chars that aren't drive letter indicators\r\n    if (this.win32) {\r\n      const parsed = path.win32.parse(entry.path)\r\n      entry.path = parsed.root === '' ? wc.encode(entry.path)\r\n        : parsed.root + wc.encode(entry.path.substr(parsed.root.length))\r\n    }\r\n\r\n    if (path.isAbsolute(entry.path))\r\n      entry.absolute = entry.path\r\n    else\r\n      entry.absolute = path.resolve(this.cwd, entry.path)\r\n\r\n    return true\r\n  }\r\n\r\n  [ONENTRY] (entry) {\r\n    if (!this[CHECKPATH](entry))\r\n      return entry.resume()\r\n\r\n    assert.equal(typeof entry.absolute, 'string')\r\n\r\n    switch (entry.type) {\r\n      case 'Directory':\r\n      case 'GNUDumpDir':\r\n        if (entry.mode)\r\n          entry.mode = entry.mode | 0o700\r\n\r\n      case 'File':\r\n      case 'OldFile':\r\n      case 'ContiguousFile':\r\n      case 'Link':\r\n      case 'SymbolicLink':\r\n        return this[CHECKFS](entry)\r\n\r\n      case 'CharacterDevice':\r\n      case 'BlockDevice':\r\n      case 'FIFO':\r\n      default:\r\n        return this[UNSUPPORTED](entry)\r\n    }\r\n  }\r\n\r\n  [ONERROR] (er, entry) {\r\n    // Cwd has to exist, or else nothing works. That's serious.\r\n    // Other errors are warnings, which raise the error in strict\r\n    // mode, but otherwise continue on.\r\n    if (er.name === 'CwdError')\r\n      this.emit('error', er)\r\n    else {\r\n      this.warn('TAR_ENTRY_ERROR', er, {entry})\r\n      this[UNPEND]()\r\n      entry.resume()\r\n    }\r\n  }\r\n\r\n  [MKDIR] (dir, mode, cb) {\r\n    mkdir(dir, {\r\n      uid: this.uid,\r\n      gid: this.gid,\r\n      processUid: this.processUid,\r\n      processGid: this.processGid,\r\n      umask: this.processUmask,\r\n      preserve: this.preservePaths,\r\n      unlink: this.unlink,\r\n      cache: this.dirCache,\r\n      cwd: this.cwd,\r\n      mode: mode,\r\n      noChmod: this.noChmod,\r\n    }, cb)\r\n  }\r\n\r\n  [DOCHOWN] (entry) {\r\n    // in preserve owner mode, chown if the entry doesn't match process\r\n    // in set owner mode, chown if setting doesn't match process\r\n    return this.forceChown ||\r\n      this.preserveOwner &&\r\n      (typeof entry.uid === 'number' && entry.uid !== this.processUid ||\r\n        typeof entry.gid === 'number' && entry.gid !== this.processGid)\r\n      ||\r\n      (typeof this.uid === 'number' && this.uid !== this.processUid ||\r\n        typeof this.gid === 'number' && this.gid !== this.processGid)\r\n  }\r\n\r\n  [UID] (entry) {\r\n    return uint32(this.uid, entry.uid, this.processUid)\r\n  }\r\n\r\n  [GID] (entry) {\r\n    return uint32(this.gid, entry.gid, this.processGid)\r\n  }\r\n\r\n  [FILE] (entry, fullyDone) {\r\n    const mode = entry.mode & 0o7777 || this.fmode\r\n    const stream = new fsm.WriteStream(entry.absolute, {\r\n      flags: getFlag(entry.size),\r\n      mode: mode,\r\n      autoClose: false,\r\n    })\r\n    stream.on('error', er => this[ONERROR](er, entry))\r\n\r\n    let actions = 1\r\n    const done = er => {\r\n      if (er)\r\n        return this[ONERROR](er, entry)\r\n\r\n      if (--actions === 0) {\r\n        fs.close(stream.fd, er => {\r\n          fullyDone()\r\n          er ? this[ONERROR](er, entry) : this[UNPEND]()\r\n        })\r\n      }\r\n    }\r\n\r\n    stream.on('finish', _ => {\r\n      // if futimes fails, try utimes\r\n      // if utimes fails, fail with the original error\r\n      // same for fchown/chown\r\n      const abs = entry.absolute\r\n      const fd = stream.fd\r\n\r\n      if (entry.mtime && !this.noMtime) {\r\n        actions++\r\n        const atime = entry.atime || new Date()\r\n        const mtime = entry.mtime\r\n        fs.futimes(fd, atime, mtime, er =>\r\n          er ? fs.utimes(abs, atime, mtime, er2 => done(er2 && er))\r\n          : done())\r\n      }\r\n\r\n      if (this[DOCHOWN](entry)) {\r\n        actions++\r\n        const uid = this[UID](entry)\r\n        const gid = this[GID](entry)\r\n        fs.fchown(fd, uid, gid, er =>\r\n          er ? fs.chown(abs, uid, gid, er2 => done(er2 && er))\r\n          : done())\r\n      }\r\n\r\n      done()\r\n    })\r\n\r\n    const tx = this.transform ? this.transform(entry) || entry : entry\r\n    if (tx !== entry) {\r\n      tx.on('error', er => this[ONERROR](er, entry))\r\n      entry.pipe(tx)\r\n    }\r\n    tx.pipe(stream)\r\n  }\r\n\r\n  [DIRECTORY] (entry, fullyDone) {\r\n    const mode = entry.mode & 0o7777 || this.dmode\r\n    this[MKDIR](entry.absolute, mode, er => {\r\n      if (er) {\r\n        fullyDone()\r\n        return this[ONERROR](er, entry)\r\n      }\r\n\r\n      let actions = 1\r\n      const done = _ => {\r\n        if (--actions === 0) {\r\n          fullyDone()\r\n          this[UNPEND]()\r\n          entry.resume()\r\n        }\r\n      }\r\n\r\n      if (entry.mtime && !this.noMtime) {\r\n        actions++\r\n        fs.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done)\r\n      }\r\n\r\n      if (this[DOCHOWN](entry)) {\r\n        actions++\r\n        fs.chown(entry.absolute, this[UID](entry), this[GID](entry), done)\r\n      }\r\n\r\n      done()\r\n    })\r\n  }\r\n\r\n  [UNSUPPORTED] (entry) {\r\n    entry.unsupported = true\r\n    this.warn('TAR_ENTRY_UNSUPPORTED',\r\n      `unsupported entry type: ${entry.type}`, {entry})\r\n    entry.resume()\r\n  }\r\n\r\n  [SYMLINK] (entry, done) {\r\n    this[LINK](entry, entry.linkpath, 'symlink', done)\r\n  }\r\n\r\n  [HARDLINK] (entry, done) {\r\n    this[LINK](entry, path.resolve(this.cwd, entry.linkpath), 'link', done)\r\n  }\r\n\r\n  [PEND] () {\r\n    this[PENDING]++\r\n  }\r\n\r\n  [UNPEND] () {\r\n    this[PENDING]--\r\n    this[MAYBECLOSE]()\r\n  }\r\n\r\n  [SKIP] (entry) {\r\n    this[UNPEND]()\r\n    entry.resume()\r\n  }\r\n\r\n  // Check if we can reuse an existing filesystem entry safely and\r\n  // overwrite it, rather than unlinking and recreating\r\n  // Windows doesn't report a useful nlink, so we just never reuse entries\r\n  [ISREUSABLE] (entry, st) {\r\n    return entry.type === 'File' &&\r\n      !this.unlink &&\r\n      st.isFile() &&\r\n      st.nlink <= 1 &&\r\n      process.platform !== 'win32'\r\n  }\r\n\r\n  // check if a thing is there, and if so, try to clobber it\r\n  [CHECKFS] (entry) {\r\n    this[PEND]()\r\n    const paths = [entry.path]\r\n    if (entry.linkpath)\r\n      paths.push(entry.linkpath)\r\n    this.reservations.reserve(paths, done => this[CHECKFS2](entry, done))\r\n  }\r\n\r\n  [CHECKFS2] (entry, done) {\r\n    this[MKDIR](path.dirname(entry.absolute), this.dmode, er => {\r\n      if (er) {\r\n        done()\r\n        return this[ONERROR](er, entry)\r\n      }\r\n      fs.lstat(entry.absolute, (er, st) => {\r\n        if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {\r\n          this[SKIP](entry)\r\n          done()\r\n        } else if (er || this[ISREUSABLE](entry, st))\r\n          this[MAKEFS](null, entry, done)\r\n\r\n        else if (st.isDirectory()) {\r\n          if (entry.type === 'Directory') {\r\n            if (!this.noChmod && (!entry.mode || (st.mode & 0o7777) === entry.mode))\r\n              this[MAKEFS](null, entry, done)\r\n            else {\r\n              fs.chmod(entry.absolute, entry.mode,\r\n                er => this[MAKEFS](er, entry, done))\r\n            }\r\n          } else\r\n            fs.rmdir(entry.absolute, er => this[MAKEFS](er, entry, done))\r\n        } else\r\n          unlinkFile(entry.absolute, er => this[MAKEFS](er, entry, done))\r\n      })\r\n    })\r\n  }\r\n\r\n  [MAKEFS] (er, entry, done) {\r\n    if (er)\r\n      return this[ONERROR](er, entry)\r\n\r\n    switch (entry.type) {\r\n      case 'File':\r\n      case 'OldFile':\r\n      case 'ContiguousFile':\r\n        return this[FILE](entry, done)\r\n\r\n      case 'Link':\r\n        return this[HARDLINK](entry, done)\r\n\r\n      case 'SymbolicLink':\r\n        return this[SYMLINK](entry, done)\r\n\r\n      case 'Directory':\r\n      case 'GNUDumpDir':\r\n        return this[DIRECTORY](entry, done)\r\n    }\r\n  }\r\n\r\n  [LINK] (entry, linkpath, link, done) {\r\n    // XXX: get the type ('file' or 'dir') for windows\r\n    fs[link](linkpath, entry.absolute, er => {\r\n      if (er)\r\n        return this[ONERROR](er, entry)\r\n      done()\r\n      this[UNPEND]()\r\n      entry.resume()\r\n    })\r\n  }\r\n}\r\n\r\nclass UnpackSync extends Unpack {\r\n  [CHECKFS] (entry) {\r\n    const er = this[MKDIR](path.dirname(entry.absolute), this.dmode, neverCalled)\r\n    if (er)\r\n      return this[ONERROR](er, entry)\r\n    try {\r\n      const st = fs.lstatSync(entry.absolute)\r\n      if (this.keep || this.newer && st.mtime > entry.mtime)\r\n        return this[SKIP](entry)\r\n      else if (this[ISREUSABLE](entry, st))\r\n        return this[MAKEFS](null, entry, neverCalled)\r\n      else {\r\n        try {\r\n          if (st.isDirectory()) {\r\n            if (entry.type === 'Directory') {\r\n              if (!this.noChmod && entry.mode && (st.mode & 0o7777) !== entry.mode)\r\n                fs.chmodSync(entry.absolute, entry.mode)\r\n            } else\r\n              fs.rmdirSync(entry.absolute)\r\n          } else\r\n            unlinkFileSync(entry.absolute)\r\n          return this[MAKEFS](null, entry, neverCalled)\r\n        } catch (er) {\r\n          return this[ONERROR](er, entry)\r\n        }\r\n      }\r\n    } catch (er) {\r\n      return this[MAKEFS](null, entry, neverCalled)\r\n    }\r\n  }\r\n\r\n  [FILE] (entry, _) {\r\n    const mode = entry.mode & 0o7777 || this.fmode\r\n\r\n    const oner = er => {\r\n      let closeError\r\n      try {\r\n        fs.closeSync(fd)\r\n      } catch (e) {\r\n        closeError = e\r\n      }\r\n      if (er || closeError)\r\n        this[ONERROR](er || closeError, entry)\r\n    }\r\n\r\n    let fd\r\n    try {\r\n      fd = fs.openSync(entry.absolute, getFlag(entry.size), mode)\r\n    } catch (er) {\r\n      return oner(er)\r\n    }\r\n    const tx = this.transform ? this.transform(entry) || entry : entry\r\n    if (tx !== entry) {\r\n      tx.on('error', er => this[ONERROR](er, entry))\r\n      entry.pipe(tx)\r\n    }\r\n\r\n    tx.on('data', chunk => {\r\n      try {\r\n        fs.writeSync(fd, chunk, 0, chunk.length)\r\n      } catch (er) {\r\n        oner(er)\r\n      }\r\n    })\r\n\r\n    tx.on('end', _ => {\r\n      let er = null\r\n      // try both, falling futimes back to utimes\r\n      // if either fails, handle the first error\r\n      if (entry.mtime && !this.noMtime) {\r\n        const atime = entry.atime || new Date()\r\n        const mtime = entry.mtime\r\n        try {\r\n          fs.futimesSync(fd, atime, mtime)\r\n        } catch (futimeser) {\r\n          try {\r\n            fs.utimesSync(entry.absolute, atime, mtime)\r\n          } catch (utimeser) {\r\n            er = futimeser\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this[DOCHOWN](entry)) {\r\n        const uid = this[UID](entry)\r\n        const gid = this[GID](entry)\r\n\r\n        try {\r\n          fs.fchownSync(fd, uid, gid)\r\n        } catch (fchowner) {\r\n          try {\r\n            fs.chownSync(entry.absolute, uid, gid)\r\n          } catch (chowner) {\r\n            er = er || fchowner\r\n          }\r\n        }\r\n      }\r\n\r\n      oner(er)\r\n    })\r\n  }\r\n\r\n  [DIRECTORY] (entry, _) {\r\n    const mode = entry.mode & 0o7777 || this.dmode\r\n    const er = this[MKDIR](entry.absolute, mode)\r\n    if (er)\r\n      return this[ONERROR](er, entry)\r\n    if (entry.mtime && !this.noMtime) {\r\n      try {\r\n        fs.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime)\r\n      } catch (er) {}\r\n    }\r\n    if (this[DOCHOWN](entry)) {\r\n      try {\r\n        fs.chownSync(entry.absolute, this[UID](entry), this[GID](entry))\r\n      } catch (er) {}\r\n    }\r\n    entry.resume()\r\n  }\r\n\r\n  [MKDIR] (dir, mode) {\r\n    try {\r\n      return mkdir.sync(dir, {\r\n        uid: this.uid,\r\n        gid: this.gid,\r\n        processUid: this.processUid,\r\n        processGid: this.processGid,\r\n        umask: this.processUmask,\r\n        preserve: this.preservePaths,\r\n        unlink: this.unlink,\r\n        cache: this.dirCache,\r\n        cwd: this.cwd,\r\n        mode: mode,\r\n      })\r\n    } catch (er) {\r\n      return er\r\n    }\r\n  }\r\n\r\n  [LINK] (entry, linkpath, link, _) {\r\n    try {\r\n      fs[link + 'Sync'](linkpath, entry.absolute)\r\n      entry.resume()\r\n    } catch (er) {\r\n      return this[ONERROR](er, entry)\r\n    }\r\n  }\r\n}\r\n\r\nUnpack.Sync = UnpackSync\r\nmodule.exports = Unpack\r\n"]},"metadata":{},"sourceType":"script"}